{"version":3,"file":"gridrefutils.mjs","sources":["../src/constants.js","../src/LatLng/LatLng.js","../src/LatLng/LatLngWGS84.js","../src/LatLng/LatLngGB.js","../src/LatLng/LatLngIE.js","../src/LatLng/LatLngCI.js","../src/GridCoords/GridCoords.js","../src/GridRef/GridRef.js","../src/GridRef/GridRefCI.js","../src/GridRef/GridRefGB.js","../src/GridRef/GridRefIE.js","../src/GridRef/parser.js"],"sourcesContent":["export const deg2rad = Math.PI / 180;\r\nexport const rad2deg = 180.0 / Math.PI;\r\n\r\n","import {deg2rad} from '../constants';\r\n\r\nexport class LatLng {\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tlat;\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tlng;\r\n\r\n\t/**\r\n\t * represents lat lng\r\n\t *\r\n\t * @param {number} lat\r\n\t * @param {number} lng\r\n\t * @constructor\r\n\t */\r\n\tconstructor(lat, lng) {\r\n\t\tthis.lat = lat;\r\n\t\tthis.lng = lng;\r\n\t};\r\n\r\n\tstatic _transform(lat, lon, a, e, h, a2, e2, xp, yp, zp, xr, yr, zr, s) {\r\n\t\t// convert to cartesian; lat, lon are radians\r\n\t\tconst sf = s * 0.000001;\r\n\t\tlet v = a / (Math.sqrt(1 - (e * (Math.sin(lat) * Math.sin(lat)))));\r\n\t\tconst x = (v + h) * Math.cos(lat) * Math.cos(lon);\r\n\t\tconst y = (v + h) * Math.cos(lat) * Math.sin(lon);\r\n\t\tconst z = ((1 - e) * v + h) * Math.sin(lat);\r\n\t\t// transform cartesian\r\n\t\tconst xrot = (xr / 3600) * deg2rad;\r\n\t\tconst yrot = (yr / 3600) * deg2rad;\r\n\t\tconst zrot = (zr / 3600) * deg2rad;\r\n\t\tconst hx = x + (x * sf) - (y * zrot) + (z * yrot) + xp;\r\n\t\tconst hy = (x * zrot) + y + (y * sf) - (z * xrot) + yp;\r\n\t\tconst hz = (-1 * x * yrot) + (y * xrot) + z + (z * sf) + zp;\r\n\t\t// Convert back to lat, lon\r\n\t\tlon = Math.atan(hy / hx);\r\n\t\tconst p = Math.sqrt((hx * hx) + (hy * hy));\r\n\t\tlat = Math.atan(hz / (p * (1 - e2)));\r\n\t\tv = a2 / (Math.sqrt(1 - e2 * (Math.sin(lat) * Math.sin(lat))));\r\n\t\tlet errvalue = 1.0;\r\n\t\tlet lat0 = 0;\r\n\t\twhile (errvalue > 0.001) {\r\n\t\t\tlat0 = Math.atan((hz + e2 * v * Math.sin(lat)) / p);\r\n\t\t\terrvalue = Math.abs(lat0 - lat);\r\n\t\t\tlat = lat0;\r\n\t\t}\r\n\t\t//h = p / Math.cos(lat) - v;\r\n\t\t//var geo = { latitude: lat, longitude: lon, height: h };  // object to hold lat and lon\r\n\t\treturn (new LatLng(lat, lon));\r\n\t}\r\n\r\n\t//helper\r\n\tstatic _Marc(bf0, n, phi0, phi) {\r\n\t\treturn bf0 * (((1 + n + ((5 / 4) * (n * n)) + ((5 / 4) * (n * n * n))) * (phi - phi0))\r\n\t\t\t- (((3 * n) + (3 * (n * n)) + ((21 / 8) * (n * n * n))) * (Math.sin(phi - phi0)) * (Math.cos(phi + phi0)))\r\n\t\t\t+ ((((15 / 8) * (n * n)) + ((15 / 8) * (n * n * n))) * (Math.sin(2 * (phi - phi0))) * (Math.cos(2 * (phi + phi0))))\r\n\t\t\t- (((35 / 24) * (n * n * n)) * (Math.sin(3 * (phi - phi0))) * (Math.cos(3 * (phi + phi0)))));\r\n\t};\r\n\r\n}\r\n","/**\r\n * represents lat lng as WGS84 (google map form)\r\n *\r\n * @param {number} lat\r\n * @param {number} lng\r\n * @constructor\r\n */\r\nimport {LatLng} from \"./LatLng\";\r\n\r\nexport class LatLngWGS84 extends LatLng {\r\n\tconstructor(lat, lng) {\r\n\t\tsuper(lat, lng);\r\n\t}\r\n}\r\n","import {LatLng} from './LatLng';\r\nimport {LatLngWGS84} from './LatLngWGS84';\r\nimport {deg2rad, rad2deg} from '../constants';\r\n\r\n/**\r\n * represents lat lng as OSGB1936 (Ordnance Survey projection)\r\n *\r\n * @param {number} lat\r\n * @param {number} lng\r\n * @constructor\r\n */\r\nexport class LatLngGB extends LatLng {\r\n\r\n\tconstructor(lat, lng) {\r\n\t\tsuper(lat, lng);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {LatLngWGS84}\r\n\t */\r\n\tto_WGS84() {\r\n\t\t//airy1830 = new RefEll(6377563.396, 6356256.909);\r\n\t\tlet a = 6377563.396; //airy1830.maj;\r\n\t\t//var b        = 6356256.909; //airy1830.min;\r\n\t\tlet eSquared = 0.00667054007; // ((maj * maj) - (min * min)) / (maj * maj); // airy1830.ecc;\r\n\t\tconst phi = this.lat * deg2rad; // (Math.PI / 180)(this.lat);\r\n\t\tconst sinPhi = Math.sin(phi);\r\n\t\tconst lambda = this.lng * deg2rad; // (Math.PI / 180)(this.lng);\r\n\t\tconst v = a / (Math.sqrt(1 - eSquared * (sinPhi * sinPhi)));\r\n\t\t//H = 0; // height\r\n\t\tconst x = v * Math.cos(phi) * Math.cos(lambda);\r\n\t\tconst y = v * Math.cos(phi) * Math.sin(lambda);\r\n\t\tconst z = ((1 - eSquared) * v) * sinPhi;\r\n\r\n\t\tconst tx = 446.448;\r\n\t\tconst ty = -124.157;\r\n\t\tconst tz = 542.060;\r\n\t\tconst s = -0.0000204894;\r\n\t\tconst rx = 0.000000728190110241429; // (Math.PI / 180)( 0.00004172222);\r\n\t\tconst ry = 0.000001197489772948010; // (Math.PI / 180)( 0.00006861111);\r\n\t\tconst rz = 0.000004082615892268120; // (Math.PI / 180)( 0.00023391666);\r\n\r\n\t\tconst xB = tx + (x * (1 + s)) + (-rx * y) + (ry * z);\r\n\t\tconst yB = ty + (rz * x) + (y * (1 + s)) + (-rx * z);\r\n\t\tconst zB = tz + (-ry * x) + (rx * y) + (z * (1 + s));\r\n\r\n\t\t//wgs84 = new RefEll(6378137.000, 6356752.3141);\r\n\t\ta = 6378137.000; // wgs84.maj;\r\n\t\t//var b        = 6356752.3141; // wgs84.min;\r\n\t\teSquared = 0.00669438003;// ((maj * maj) - (min * min)) / (maj * maj); //wgs84.ecc;\r\n\r\n\t\t//lambdaB = (180 / Math.PI)(Math.atan(yB / xB));\r\n\t\tconst p = Math.sqrt((xB * xB) + (yB * yB));\r\n\t\tlet phiN = Math.atan(zB / (p * (1 - eSquared)));\r\n\r\n\t\tfor (let i = 1; i < 10; ++i) {\r\n\t\t\tlet sinPhiN = Math.sin(phiN); // this must be in the for loop as phiN is variable\r\n\t\t\tphiN = Math.atan((zB + (eSquared * (a / (Math.sqrt(1 - eSquared * (sinPhiN * sinPhiN)))) * sinPhiN)) / p);\r\n\t\t}\r\n\r\n\t\t//this.lat = rad2deg * phiN;\r\n\t\t//this.lng = rad2deg * (Math.atan(yB / xB)); // lambdaB;\r\n\r\n\t\treturn new LatLngWGS84(rad2deg * phiN, rad2deg * (Math.atan(yB / xB)));\r\n\t};\r\n\r\n// /**\r\n//  * converts lat and lon (OSGB36) to OS northings and eastings\r\n//  *\r\n//  * @returns {GridCoordsGB}\r\n//  */\r\n// LatLngGB.prototype.to_os_coords = function() {\r\n//     var phi = this.lat * deg2rad; // convert latitude to radians\r\n//     var lam = this.lng * deg2rad; // convert longitude to radians\r\n//     var a = 6377563.396; // OSGB semi-major axis\r\n//     var b = 6356256.91; // OSGB semi-minor axis\r\n//     var e0 = 400000; // easting of false origin\r\n//     var n0 = -100000; // northing of false origin\r\n//     var f0 = 0.9996012717; // OSGB scale factor on central meridian\r\n//     var e2 = 0.0066705397616; // OSGB eccentricity squared\r\n//     var lam0 = -0.034906585039886591; // OSGB false east\r\n//     var phi0 = 0.85521133347722145; // OSGB false north\r\n//     var af0 = a * f0;\r\n//     var bf0 = b * f0;\r\n//\r\n//     // easting\r\n//     var slat2 = Math.sin(phi) * Math.sin(phi);\r\n//     var nu = af0 / (Math.sqrt(1 - (e2 * (slat2))));\r\n//     var rho = (nu * (1 - e2)) / (1 - (e2 * slat2));\r\n//     var eta2 = (nu / rho) - 1;\r\n//     var p = lam - lam0;\r\n//     var IV = nu * Math.cos(phi);\r\n//     var clat3 = Math.pow(Math.cos(phi), 3);\r\n//     var tlat2 = Math.tan(phi) * Math.tan(phi);\r\n//     var V = (nu / 6) * clat3 * ((nu / rho) - tlat2);\r\n//     var clat5 = Math.pow(Math.cos(phi), 5);\r\n//     var tlat4 = Math.pow(Math.tan(phi), 4);\r\n//     var VI = (nu / 120) * clat5 * ((5 - (18 * tlat2)) + tlat4 + (14 * eta2) - (58 * tlat2 * eta2));\r\n//     var east = e0 + (p * IV) + (Math.pow(p, 3) * V) + (Math.pow(p, 5) * VI);\r\n//\r\n//     // northing\r\n//     var n = (af0 - bf0) / (af0 + bf0);\r\n//     var M = LatLng._Marc(bf0, n, phi0, phi);\r\n//     var I = M + (n0);\r\n//     var II = (nu / 2) * Math.sin(phi) * Math.cos(phi);\r\n//     var III = ((nu / 24) * Math.sin(phi) * Math.pow(Math.cos(phi), 3)) * (5 - Math.pow(Math.tan(phi), 2) + (9 * eta2));\r\n//     var IIIA = ((nu / 720) * Math.sin(phi) * clat5) * (61 - (58 * tlat2) + tlat4);\r\n//     var north = I + ((p * p) * II) + (Math.pow(p, 4) * III) + (Math.pow(p, 6) * IIIA);\r\n//\r\n// \treturn new GridCoordsGB(Math.round(east), Math.round(north));\r\n// };\r\n\r\n\t/**\r\n\t *\r\n\t * @param {LatLngWGS84} latLngWGS84\r\n\t * @returns {LatLngGB}\r\n\t */\r\n\tstatic from_wgs84(latLngWGS84) {\r\n\r\n\t\t//first off convert to radians\r\n\t\tconst radWGlat = latLngWGS84.lat * deg2rad;\r\n\t\tconst radWGlon = latLngWGS84.lng * deg2rad;\r\n\t\t//these are the values for WGS84(GRS80) to OSGB36(Airy)\r\n\t\tconst a = 6378137; // WGS84_AXIS\r\n\t\tconst e = 0.00669438037928458; // WGS84_ECCENTRIC\r\n\t\t//var h = height; // height above datum (from GPGGA sentence)\r\n\t\tconst h = 0;\r\n\t\tconst a2 = 6377563.396; // OSGB_AXIS\r\n\t\tconst e2 = 0.0066705397616; // OSGB_ECCENTRIC\r\n\t\tconst xp = -446.448;\r\n\t\tconst yp = 125.157;\r\n\t\tconst zp = -542.06;\r\n\t\tconst xr = -0.1502;\r\n\t\tconst yr = -0.247;\r\n\t\tconst zr = -0.8421;\r\n\t\tconst s = 20.4894;\r\n\r\n\t\t// convert to cartesian; lat, lon are in radians\r\n\t\tconst sf = s * 0.000001;\r\n\t\tlet v = a / (Math.sqrt(1 - (e * Math.sin(radWGlat) * Math.sin(radWGlat))));\r\n\t\tconst x = (v + h) * Math.cos(radWGlat) * Math.cos(radWGlon);\r\n\t\tconst y = (v + h) * Math.cos(radWGlat) * Math.sin(radWGlon);\r\n\t\tconst z = ((1 - e) * v + h) * Math.sin(radWGlat);\r\n\r\n\t\t// transform cartesian\r\n\t\tconst xrot = (xr / 3600) * deg2rad;\r\n\t\tconst yrot = (yr / 3600) * deg2rad;\r\n\t\tconst zrot = (zr / 3600) * deg2rad;\r\n\t\tconst hx = x + (x * sf) - (y * zrot) + (z * yrot) + xp;\r\n\t\tconst hy = (x * zrot) + y + (y * sf) - (z * xrot) + yp;\r\n\t\tconst hz = (-1 * x * yrot) + (y * xrot) + z + (z * sf) + zp;\r\n\r\n\t\t// Convert back to lat, lon\r\n\t\tconst newLon = Math.atan(hy / hx);\r\n\t\tconst p = Math.sqrt((hx * hx) + (hy * hy));\r\n\t\tlet newLat = Math.atan(hz / (p * (1 - e2)));\r\n\t\tv = a2 / (Math.sqrt(1 - e2 * (Math.sin(newLat) * Math.sin(newLat))));\r\n\t\tlet errvalue = 1.0;\r\n\t\tlet lat0 = 0;\r\n\t\twhile (errvalue > 0.001) {\r\n\t\t\tlat0 = Math.atan((hz + e2 * v * Math.sin(newLat)) / p);\r\n\t\t\terrvalue = Math.abs(lat0 - newLat);\r\n\t\t\tnewLat = lat0;\r\n\t\t}\r\n\r\n\t\treturn new LatLngGB(newLat * rad2deg, newLon * rad2deg);\r\n\t}\r\n}\r\n","import {LatLng} from './LatLng';\r\nimport {LatLngWGS84} from './LatLngWGS84';\r\n// import { GridCoordsIE } from '../GridCoords/GridCoordsIE';\r\nimport {deg2rad, rad2deg} from '../constants';\r\n\r\n\r\n/**\r\n * represents lat lng as Modified Airy (Irish grid projection)\r\n *\r\n */\r\nexport class LatLngIE extends LatLng {\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} lat\r\n\t * @param {number} lng\r\n\t */\r\n\tconstructor(lat, lng) {\r\n\t\tsuper(lat, lng);\r\n\t};\r\n\r\n// /**\r\n//  * converts lat and lon (modified Airy) to OSI northings and eastings\r\n//  *\r\n//  * @returns {GridCoordsIE}\r\n//  */\r\n// to_os_coords() {\r\n//     //var deg2rad = Math.PI / 180;\r\n//     //var rad2deg = 180.0 / Math.PI;\r\n//\r\n//     var phi = this.lat * deg2rad; // convert latitude to radians\r\n//     var lam = this.lng * deg2rad; // convert longitude to radians\r\n//     var a = 6377340.189;      // OSI semi-major\r\n//     var b = 6356034.447;      // OSI semi-minor\r\n//     var e0 = 200000;          // OSI easting of false origin\r\n//     var n0 = 250000;          // OSI northing of false origin\r\n//     var f0 = 1.000035;        // OSI scale factor on central meridian\r\n//     var e2 = 0.00667054015;   // OSI eccentricity squared\r\n//     var lam0 = -0.13962634015954636615389526147909;   // OSI false east\r\n//     var phi0 = 0.93375114981696632365417456114141;    // OSI false north\r\n//     var af0 = a * f0;\r\n//     var bf0 = b * f0;\r\n//\r\n//     // easting\r\n//     var slat2 = Math.sin(phi) * Math.sin(phi);\r\n//     var nu = af0 / (Math.sqrt(1 - (e2 * (slat2))));\r\n//     var rho = (nu * (1 - e2)) / (1 - (e2 * slat2));\r\n//     var eta2 = (nu / rho) - 1;\r\n//     var p = lam - lam0;\r\n//     var IV = nu * Math.cos(phi);\r\n//     var clat3 = Math.pow(Math.cos(phi), 3);\r\n//     var tlat2 = Math.tan(phi) * Math.tan(phi);\r\n//     var V = (nu / 6) * clat3 * ((nu / rho) - tlat2);\r\n//     var clat5 = Math.pow(Math.cos(phi), 5);\r\n//     var tlat4 = Math.pow(Math.tan(phi), 4);\r\n//     var VI = (nu / 120) * clat5 * ((5 - (18 * tlat2)) + tlat4 + (14 * eta2) - (58 * tlat2 * eta2));\r\n//     var east = e0 + (p * IV) + (Math.pow(p, 3) * V) + (Math.pow(p, 5) * VI);\r\n//\r\n//     // northing\r\n//     var n = (af0 - bf0) / (af0 + bf0);\r\n//     var M = LatLng._Marc(bf0, n, phi0, phi);\r\n//     var I = M + (n0);\r\n//     var II = (nu / 2) * Math.sin(phi) * Math.cos(phi);\r\n//     var III = ((nu / 24) * Math.sin(phi) * Math.pow(Math.cos(phi), 3)) * (5 - Math.pow(Math.tan(phi), 2) + (9 * eta2));\r\n//     var IIIA = ((nu / 720) * Math.sin(phi) * clat5) * (61 - (58 * tlat2) + tlat4);\r\n//     var north = I + ((p * p) * II) + (Math.pow(p, 4) * III) + (Math.pow(p, 6) * IIIA);\r\n//\r\n// \t//return {x: Math.round(east), y: Math.round(north)};\r\n//\r\n// \t/*\r\n// \treturn (east > 0 && north > 0) ?\r\n// \t\tnew GridCoordsIE(Math.round(east), Math.round(north))\r\n// \t\t:\r\n// \t\tnull;\r\n// \t*/\r\n//    return new GridCoordsIE(Math.round(east), Math.round(north));\r\n// };\r\n\r\n\t/**\r\n\t * convert Irish projection to WGS84 (for Google Maps)\r\n\t * see http://www.carabus.co.uk/ll_ngr.html\r\n\t */\r\n\tto_WGS84() {\r\n\t\tconst IRISH_AXIS = 6377340.189;\r\n\t\tconst IRISH_ECCENTRIC = 0.00667054015;\r\n\r\n\t\tconst WGS84_AXIS = 6378137;\r\n\t\tconst WGS84_ECCENTRIC = 0.00669438037928458;\r\n\r\n\t\t/*\r\n\t\t * IE\r\n\t\ta = 6377340.189;      // OSI semi-major\r\n\t\tb = 6356034.447;      // OSI semi-minor\r\n\t\te0 = 200000;          // OSI easting of false origin\r\n\t\tn0 = 250000;          // OSI northing of false origin\r\n\t\tf0 = 1.000035;        // OSI scale factor on central meridian\r\n\t\te2 = 0.00667054015;   // OSI eccentricity squared\r\n\t\tlam0 = -0.13962634015954636615389526147909;   // OSI false east\r\n\t\tphi0 = 0.93375114981696632365417456114141;    // OSI false north\r\n\t\t*/\r\n\r\n\t\t//height = 0;\r\n\r\n\t\tconst latLngRadians = LatLng._transform(this.lat * deg2rad, this.lng * deg2rad, IRISH_AXIS, IRISH_ECCENTRIC, 0, WGS84_AXIS, WGS84_ECCENTRIC,\r\n\t\t\t482.53, -130.596, 564.557, -1.042, -0.214, -0.631, -8.15);\r\n\r\n\t\treturn new LatLngWGS84(latLngRadians.lat * rad2deg, latLngRadians.lng * rad2deg);\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @param {LatLngWGS84} latLngWGS84\r\n\t * @returns {LatLngIE}\r\n\t */\r\n\tstatic from_wgs84(latLngWGS84) {\r\n\t\tconst phip = latLngWGS84.lat * deg2rad;\r\n\t\tconst lambdap = latLngWGS84.lng * deg2rad;\r\n\r\n\t\tconst IRISH_AXIS = 6377340.189;\r\n\t\tconst IRISH_ECCENTRIC = 0.00667054015;\r\n\r\n\t\tconst WGS84_AXIS = 6378137;\r\n\t\tconst WGS84_ECCENTRIC = 0.00669438037928458;\r\n\r\n\r\n\t\t/*\r\n\t\t * IE\r\n\t\ta = 6377340.189;      // OSI semi-major\r\n\t\tb = 6356034.447;      // OSI semi-minor\r\n\t\te0 = 200000;          // OSI easting of false origin\r\n\t\tn0 = 250000;          // OSI northing of false origin\r\n\t\tf0 = 1.000035;        // OSI scale factor on central meridian\r\n\t\te2 = 0.00667054015;   // OSI eccentricity squared\r\n\t\tlam0 = -0.13962634015954636615389526147909;   // OSI false east\r\n\t\tphi0 = 0.93375114981696632365417456114141;    // OSI false north\r\n\t\t */\r\n\r\n\t\tconst height = 0;\r\n\t\tconst latlng = LatLng._transform(phip, lambdap, WGS84_AXIS, WGS84_ECCENTRIC, height, IRISH_AXIS, IRISH_ECCENTRIC,\r\n\t\t\t-482.53, 130.596, -564.557, 1.042, 0.214, 0.631, 8.15);\r\n\r\n\t\treturn new LatLngIE(latlng.lat * rad2deg, latlng.lng * rad2deg);\r\n\t}\r\n}\r\n","import {LatLng} from './LatLng';\r\nimport {rad2deg, deg2rad} from '../constants';\r\n\r\nexport class LatLngCI extends LatLng {\r\n\t/**\r\n\t * represents lat lng as INT24 (CI grid projection)\r\n\t *\r\n\t * @constructor\r\n\t * @param {number} lat\r\n\t * @param {number} lng\r\n\t */\r\n\tconstructor(lat, lng) {\r\n\t\tsuper(lat, lng);\r\n\t};\r\n\r\n\t// /**\r\n\t//  * converts lat and lon to CI northings and eastings\r\n\t//  *\r\n\t//  * @returns GridCoordsCI\r\n\t//  */\r\n\t// to_os_coords() {\r\n\t// \tvar phi = this.lat * deg2rad; // convert latitude to radians\r\n\t// \tvar lam = this.lng * deg2rad; // convert longitude to radians\r\n\t// \tvar a = 6378388.000;      // OSI semi-major\r\n\t// \tvar b = 6356911.946;      // OSI semi-minor\r\n\t// \tvar e0 = 500000;          // OSI easting of false origin\r\n\t// \tvar n0 = 0;          // OSI northing of false origin\r\n\t// \tvar f0 = 0.9996;        // OSI scale factor on central meridian\r\n\t// \tvar e2 = 0.0067226700223333;   // OSI eccentricity squared\r\n\t// \tvar lam0 = -0.0523598775598;   // OSI false east\r\n\t// \tvar phi0 = 0;    // OSI false north\r\n\t// \tvar af0 = a * f0;\r\n\t// \tvar bf0 = b * f0;\r\n\t//\r\n\t// \t// easting\r\n\t// \tvar slat2 = Math.sin(phi) * Math.sin(phi);\r\n\t// \tvar nu = af0 / (Math.sqrt(1 - (e2 * (slat2))));\r\n\t// \tvar rho = (nu * (1 - e2)) / (1 - (e2 * slat2));\r\n\t// \tvar eta2 = (nu / rho) - 1;\r\n\t// \tvar p = lam - lam0;\r\n\t// \tvar IV = nu * Math.cos(phi);\r\n\t// \tvar clat3 = Math.pow(Math.cos(phi), 3);\r\n\t// \tvar tlat2 = Math.tan(phi) * Math.tan(phi);\r\n\t// \tvar V = (nu / 6) * clat3 * ((nu / rho) - tlat2);\r\n\t// \tvar clat5 = Math.pow(Math.cos(phi), 5);\r\n\t// \tvar tlat4 = Math.pow(Math.tan(phi), 4);\r\n\t// \tvar VI = (nu / 120) * clat5 * ((5 - (18 * tlat2)) + tlat4 + (14 * eta2) - (58 * tlat2 * eta2));\r\n\t// \tvar east = e0 + (p * IV) + (Math.pow(p, 3) * V) + (Math.pow(p, 5) * VI);\r\n\t//\r\n\t// \t// northing\r\n\t// \tvar n = (af0 - bf0) / (af0 + bf0);\r\n\t// \tvar M = LatLng._Marc(bf0, n, phi0, phi);\r\n\t// \tvar I = M + (n0);\r\n\t// \tvar II = (nu / 2) * Math.sin(phi) * Math.cos(phi);\r\n\t// \tvar III = ((nu / 24) * Math.sin(phi) * Math.pow(Math.cos(phi), 3)) * (5 - Math.pow(Math.tan(phi), 2) + (9 * eta2));\r\n\t// \tvar IIIA = ((nu / 720) * Math.sin(phi) * clat5) * (61 - (58 * tlat2) + tlat4);\r\n\t// \tvar north = I + ((p * p) * II) + (Math.pow(p, 4) * III) + (Math.pow(p, 6) * IIIA);\r\n\t//\r\n\t// \t\t//return {x: Math.round(east), y: Math.round(north)};\r\n\t// \treturn new GridCoordsCI(Math.round(east), Math.round(north));\r\n\t// };\r\n\r\n\t/**\r\n\t *\r\n\t * @param {LatLngWGS84} latLngWGS84\r\n\t * @returns {LatLngCI}\r\n\t */\r\n\tstatic from_wgs84(latLngWGS84) {\r\n\t\tconst phip = latLngWGS84.lat * deg2rad;\r\n\t\tconst lambdap = latLngWGS84.lng * deg2rad;\r\n\r\n\t\tconst CI_AXIS = 6378388.000;\r\n\t\tconst CI_ECCENTRIC = 0.0067226700223333;\r\n\r\n\t\tconst WGS84_AXIS = 6378137;\r\n\t\tconst WGS84_ECCENTRIC = 0.00669438037928458;\r\n\r\n\r\n\t\t/*\r\n\t\t * CI\r\n\t\t a = 6378388.000;       // INT24 ED50 semi-major\r\n\t\t b = 6356911.946;       // INT24 ED50 semi-minor\r\n\t\t e0 = 500000;           // CI easting of false origin\r\n\t\t n0 = 0;                // CI northing of false origin\r\n\t\t f0 = 0.9996;           // INT24 ED50 scale factor on central meridian\r\n\t\t e2 = 0.0067226700223333;  // INT24 ED50 eccentricity squared\r\n\t\t lam0 = -0.0523598775598;  // CI false east\r\n\t\t phi0 = 0 * deg2rad;       // CI false north\r\n\t\t */\r\n\r\n\t\tconst height = 0;\r\n\t\tconst latlng = LatLng._transform(phip, lambdap, WGS84_AXIS, WGS84_ECCENTRIC, height, CI_AXIS, CI_ECCENTRIC,\r\n\t\t\t83.901, 98.127, 118.635, 0, 0, 0, 0);\r\n\r\n\t\treturn new LatLngCI(latlng.lat * rad2deg, latlng.lng * rad2deg);\r\n\t};\r\n}\r\n","import {LatLngGB} from '../LatLng/LatLngGB'\r\nimport {LatLngIE} from '../LatLng/LatLngIE';\r\nimport {LatLngCI} from '../LatLng/LatLngCI';\r\nimport {LatLngWGS84} from '../LatLng/LatLngWGS84';\r\nimport {deg2rad, rad2deg} from \"../constants\";\r\nimport {LatLng} from \"../LatLng/LatLng\";\r\n\r\n/**\r\n * tetrad letters ordered by easting then northing (steps of 2000m)\r\n * i.e. (x*4) + y\r\n *\r\n * where x and y are integer of (10km remainder / 2)\r\n * @type {string}\r\n */\r\nexport const TETRAD_LETTERS = 'ABCDEFGHIJKLMNPQRSTUVWXYZ';\r\n\r\n/**\r\n * abstract representation of a grid-ref co-ordinate pair\r\n * ( *not a grid-ref string* )\r\n *\r\n */\r\nexport class GridCoords {\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tx;\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\ty;\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n\t/**\r\n\t * convert easting,northing to a WGS84 lat lng\r\n\t * @abstract\r\n\t * @returns {LatLngWGS84}\r\n\t */\r\n\tto_latLng() {\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} precision metres\r\n\t * @abstract\r\n\t * @returns {string}\r\n\t */\r\n\tto_gridref(precision) {\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @abstract\r\n\t * @returns {?string}\r\n\t */\r\n\tto_hectad() {\r\n\t}\r\n\r\n\t// /**\r\n\t//  * tetrad letters ordered by northing then easting (steps of 2000m)\r\n\t//  * i.e. (y*5) + x\r\n\t//  *\r\n\t//  * where x and y are integer of (10km remainder / 2)\r\n\t//  *\r\n\t//  * @type {string}\r\n\t//  */\r\n\t// static tetradLettersRowFirst = 'AFKQVBGLRWCHMSXDINTYEJPUZ';\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} lat WGS84 degrees\r\n\t * @param {number} lng WGS84 degrees\r\n\t * @returns {GridCoords|null}\r\n\t */\r\n\tstatic from_latlng(lat, lng) {\r\n\t\t// test if GB\r\n\t\tif (lng >= -8.74 && lat > 49.88) {\r\n\t\t\t// lng extreme must accommodate St Kilda\r\n\r\n\t\t\t//let os = LatLngGB.from_wgs84(new LatLngWGS84(lat, lng)).to_os_coords();\r\n\t\t\tconst os = GridCoords._from_gb_latlng(LatLngGB.from_wgs84(new LatLngWGS84(lat, lng)));\r\n\t\t\tif (os.x >= 0 && os.is_gb_hectad()) {\r\n\t\t\t\treturn os;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// test if Irish\r\n\t\tif (lng < -5.3 && lat > 51.34 && lng > -11 && lat < 55.73) {\r\n\t\t\t//let osI = LatLngIE.from_wgs84(new LatLngWGS84(lat, lng)).to_os_coords();\r\n\t\t\tconst osI = GridCoords._from_ie_latlng(LatLngIE.from_wgs84(new LatLngWGS84(lat, lng)));\r\n\r\n\t\t\tif (osI.x < 0 || osI.y < 0) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else {\r\n\t\t\t\treturn osI;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//let osCi = LatLngCI.from_wgs84(new LatLngWGS84(lat, lng)).to_os_coords();\r\n\t\t\tconst osCi = GridCoords._from_ci_latlng(LatLngCI.from_wgs84(new LatLngWGS84(lat, lng)));\r\n\r\n\t\t\tif (osCi.x >= 500000 && osCi.x < 600000 && osCi.y >= 5400000 && osCi.y < 5600000) {\r\n\t\t\t\treturn osCi;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null; //not a valid location\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {LatLngGB} latLng GB projected latitude / longitude (degrees)\r\n\t */\r\n\tstatic _from_gb_latlng(latLng) {\r\n\t\tconst phi = latLng.lat * deg2rad; // convert latitude to radians\r\n\t\tconst lam = latLng.lng * deg2rad; // convert longitude to radians\r\n\t\tconst a = 6377563.396; // OSGB semi-major axis\r\n\t\tconst b = 6356256.91; // OSGB semi-minor axis\r\n\t\tconst e0 = 400000; // easting of false origin\r\n\t\tconst n0 = -100000; // northing of false origin\r\n\t\tconst f0 = 0.9996012717; // OSGB scale factor on central meridian\r\n\t\tconst e2 = 0.0066705397616; // OSGB eccentricity squared\r\n\t\tconst lam0 = -0.034906585039886591; // OSGB false east\r\n\t\tconst phi0 = 0.85521133347722145; // OSGB false north\r\n\t\tconst af0 = a * f0;\r\n\t\tconst bf0 = b * f0;\r\n\r\n\t\t// easting\r\n\t\tconst slat2 = Math.sin(phi) * Math.sin(phi);\r\n\t\tconst nu = af0 / (Math.sqrt(1 - (e2 * (slat2))));\r\n\t\tconst rho = (nu * (1 - e2)) / (1 - (e2 * slat2));\r\n\t\tconst eta2 = (nu / rho) - 1;\r\n\t\tconst p = lam - lam0;\r\n\t\tconst IV = nu * Math.cos(phi);\r\n\t\tconst clat3 = Math.pow(Math.cos(phi), 3);\r\n\t\tconst tlat2 = Math.tan(phi) * Math.tan(phi);\r\n\t\tconst V = (nu / 6) * clat3 * ((nu / rho) - tlat2);\r\n\t\tconst clat5 = Math.pow(Math.cos(phi), 5);\r\n\t\tconst tlat4 = Math.pow(Math.tan(phi), 4);\r\n\t\tconst VI = (nu / 120) * clat5 * ((5 - (18 * tlat2)) + tlat4 + (14 * eta2) - (58 * tlat2 * eta2));\r\n\t\tconst east = e0 + (p * IV) + (Math.pow(p, 3) * V) + (Math.pow(p, 5) * VI);\r\n\r\n\t\t// northing\r\n\t\tconst n = (af0 - bf0) / (af0 + bf0);\r\n\t\tconst M = LatLng._Marc(bf0, n, phi0, phi);\r\n\t\tconst I = M + (n0);\r\n\t\tconst II = (nu / 2) * Math.sin(phi) * Math.cos(phi);\r\n\t\tconst III = ((nu / 24) * Math.sin(phi) * Math.pow(Math.cos(phi), 3)) * (5 - Math.pow(Math.tan(phi), 2) + (9 * eta2));\r\n\t\tconst IIIA = ((nu / 720) * Math.sin(phi) * clat5) * (61 - (58 * tlat2) + tlat4);\r\n\t\tconst north = I + ((p * p) * II) + (Math.pow(p, 4) * III) + (Math.pow(p, 6) * IIIA);\r\n\r\n\t\treturn new GridCoordsGB(Math.round(east), Math.round(north));\r\n\t}\r\n\r\n\t/**\r\n\t * converts lat and lon (modified Airy) to OSI northings and eastings\r\n\t *\r\n\t * @param {LatLngIE} latLng Irish projected latitude / longitude (degrees)\r\n\t * @returns {GridCoordsIE}\r\n\t */\r\n\tstatic _from_ie_latlng(latLng) {\r\n\t\tconst phi = latLng.lat * deg2rad; // convert latitude to radians\r\n\t\tconst lam = latLng.lng * deg2rad; // convert longitude to radians\r\n\t\tconst a = 6377340.189;      // OSI semi-major\r\n\t\tconst b = 6356034.447;      // OSI semi-minor\r\n\t\tconst e0 = 200000;          // OSI easting of false origin\r\n\t\tconst n0 = 250000;          // OSI northing of false origin\r\n\t\tconst f0 = 1.000035;        // OSI scale factor on central meridian\r\n\t\tconst e2 = 0.00667054015;   // OSI eccentricity squared\r\n\t\tconst lam0 = -0.13962634015954636615389526147909;   // OSI false east\r\n\t\tconst phi0 = 0.93375114981696632365417456114141;    // OSI false north\r\n\t\tconst af0 = a * f0;\r\n\t\tconst bf0 = b * f0;\r\n\r\n\t\t// easting\r\n\t\tconst slat2 = Math.sin(phi) * Math.sin(phi);\r\n\t\tconst nu = af0 / (Math.sqrt(1 - (e2 * (slat2))));\r\n\t\tconst rho = (nu * (1 - e2)) / (1 - (e2 * slat2));\r\n\t\tconst eta2 = (nu / rho) - 1;\r\n\t\tconst p = lam - lam0;\r\n\t\tconst IV = nu * Math.cos(phi);\r\n\t\tconst clat3 = Math.pow(Math.cos(phi), 3);\r\n\t\tconst tlat2 = Math.tan(phi) * Math.tan(phi);\r\n\t\tconst V = (nu / 6) * clat3 * ((nu / rho) - tlat2);\r\n\t\tconst clat5 = Math.pow(Math.cos(phi), 5);\r\n\t\tconst tlat4 = Math.pow(Math.tan(phi), 4);\r\n\t\tconst VI = (nu / 120) * clat5 * ((5 - (18 * tlat2)) + tlat4 + (14 * eta2) - (58 * tlat2 * eta2));\r\n\t\tconst east = e0 + (p * IV) + (Math.pow(p, 3) * V) + (Math.pow(p, 5) * VI);\r\n\r\n\t\t// northing\r\n\t\tconst n = (af0 - bf0) / (af0 + bf0);\r\n\t\tconst M = LatLng._Marc(bf0, n, phi0, phi);\r\n\t\tconst I = M + (n0);\r\n\t\tconst II = (nu / 2) * Math.sin(phi) * Math.cos(phi);\r\n\t\tconst III = ((nu / 24) * Math.sin(phi) * Math.pow(Math.cos(phi), 3)) * (5 - Math.pow(Math.tan(phi), 2) + (9 * eta2));\r\n\t\tconst IIIA = ((nu / 720) * Math.sin(phi) * clat5) * (61 - (58 * tlat2) + tlat4);\r\n\t\tconst north = I + ((p * p) * II) + (Math.pow(p, 4) * III) + (Math.pow(p, 6) * IIIA);\r\n\r\n\t\treturn new GridCoordsIE(Math.round(east), Math.round(north));\r\n\t}\r\n\r\n\t/**\r\n\t * converts lat and lon to CI northings and eastings\r\n\t * @param {LatLngCI} latLng Channel Islands projected latitude / longitude (degrees)\r\n\t *\r\n\t * @returns GridCoordsCI\r\n\t */\r\n\tstatic _from_ci_latlng(latLng) {\r\n\t\tconst phi = latLng.lat * deg2rad; // convert latitude to radians\r\n\t\tconst lam = latLng.lng * deg2rad; // convert longitude to radians\r\n\t\tconst a = 6378388.000;      // OSI semi-major\r\n\t\tconst b = 6356911.946;      // OSI semi-minor\r\n\t\tconst e0 = 500000;          // OSI easting of false origin\r\n\t\tconst n0 = 0;          // OSI northing of false origin\r\n\t\tconst f0 = 0.9996;        // OSI scale factor on central meridian\r\n\t\tconst e2 = 0.0067226700223333;   // OSI eccentricity squared\r\n\t\tconst lam0 = -0.0523598775598;   // OSI false east\r\n\t\tconst phi0 = 0;    // OSI false north\r\n\t\tconst af0 = a * f0;\r\n\t\tconst bf0 = b * f0;\r\n\r\n\t\t// easting\r\n\t\tconst slat2 = Math.sin(phi) * Math.sin(phi);\r\n\t\tconst nu = af0 / (Math.sqrt(1 - (e2 * (slat2))));\r\n\t\tconst rho = (nu * (1 - e2)) / (1 - (e2 * slat2));\r\n\t\tconst eta2 = (nu / rho) - 1;\r\n\t\tconst p = lam - lam0;\r\n\t\tconst IV = nu * Math.cos(phi);\r\n\t\tconst clat3 = Math.pow(Math.cos(phi), 3);\r\n\t\tconst tlat2 = Math.tan(phi) * Math.tan(phi);\r\n\t\tconst V = (nu / 6) * clat3 * ((nu / rho) - tlat2);\r\n\t\tconst clat5 = Math.pow(Math.cos(phi), 5);\r\n\t\tconst tlat4 = Math.pow(Math.tan(phi), 4);\r\n\t\tconst VI = (nu / 120) * clat5 * ((5 - (18 * tlat2)) + tlat4 + (14 * eta2) - (58 * tlat2 * eta2));\r\n\t\tconst east = e0 + (p * IV) + (Math.pow(p, 3) * V) + (Math.pow(p, 5) * VI);\r\n\r\n\t\t// northing\r\n\t\tconst n = (af0 - bf0) / (af0 + bf0);\r\n\t\tconst M = LatLng._Marc(bf0, n, phi0, phi);\r\n\t\tconst I = M + (n0);\r\n\t\tconst II = (nu / 2) * Math.sin(phi) * Math.cos(phi);\r\n\t\tconst III = ((nu / 24) * Math.sin(phi) * Math.pow(Math.cos(phi), 3)) * (5 - Math.pow(Math.tan(phi), 2) + (9 * eta2));\r\n\t\tconst IIIA = ((nu / 720) * Math.sin(phi) * clat5) * (61 - (58 * tlat2) + tlat4);\r\n\t\tconst north = I + ((p * p) * II) + (Math.pow(p, 4) * III) + (Math.pow(p, 6) * IIIA);\r\n\r\n\t\treturn new GridCoordsCI(Math.round(east), Math.round(north));\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} easting\r\n\t * @param {number} northing\r\n\t * @return {string} tetrad letter\r\n\t */\r\n\tstatic calculate_tetrad(easting, northing) {\r\n\t\treturn (easting >= 0 && northing >= 0) ?\r\n\t\t\tTETRAD_LETTERS.charAt((Math.floor(easting % 10000 / 2000) * 5) + Math.floor(northing % 10000 / 2000)) :\r\n\t\t\t'';\r\n\t};\r\n\r\n\ttetradLetter() {\r\n\t\treturn (this.x >= 0 && this.y >= 0) ?\r\n\t\t\tTETRAD_LETTERS.charAt((Math.floor(this.x % 10000 / 2000) * 5) + Math.floor(this.y % 10000 / 2000)) :\r\n\t\t\t'';\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn this.x + ',' + this.y;\r\n\t};\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} letters\r\n * @param {number} e metres\r\n * @param {number} n metres\r\n * @param {number} precision metres\r\n * @returns {String}\r\n */\r\nexport const _e_n_to_gr = function (letters, e, n, precision) {\r\n\tlet eString = ('00000' + Math.floor(e));\r\n\tlet nString = ('00000' + Math.floor(n));\r\n\r\n\tif (precision === 2000) {\r\n\t\treturn letters +\r\n\t\t\teString.charAt(eString.length - 5) + nString.charAt(nString.length - 5) +\r\n\t\t\tGridCoords.calculate_tetrad(e, n);\r\n\t} else if (precision === 100000) {\r\n\t\treturn letters;\r\n\t} else {\r\n\t\tif (precision === 5000) {\r\n\t\t\t// ignore quadrant and treat as hectad\r\n\t\t\tprecision = 10000;\r\n\t\t}\r\n\r\n\t\tlet logPrecision = Math.round(Math.log10(precision));\r\n\t\treturn letters +\r\n\t\t\t(logPrecision ?\r\n\t\t\t\t\t(eString.slice(-5, -logPrecision) + nString.slice(-5, -logPrecision))\r\n\t\t\t\t\t:\r\n\t\t\t\t\t(eString.slice(-5) + nString.slice(-5))\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class GridCoordsGB extends GridCoords {\r\n\t/**\r\n\t * @type {GridCoordsGB}\r\n\t */\r\n\tgridCoords = null;\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} easting\r\n\t * @param {number} northing\r\n\t */\r\n\tconstructor(easting, northing) {\r\n\t\tsuper();\r\n\t\tthis.x = easting | 0;\r\n\t\tthis.y = northing | 0;\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcountry = 'GB';\r\n\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstatic gbHectads = '';\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} precision metres\r\n\t * @returns {string}\r\n\t */\r\n\tto_gridref(precision) {\r\n\t\tconst hundredkmE = this.x / 100000 | 0; // Math.floor(this.x / 100000);\r\n\t\tconst hundredkmN = this.y / 100000 | 0; // Math.floor(this.y / 100000);\r\n\t\tlet firstLetter;\r\n\t\tif (hundredkmN < 5) {\r\n\t\t\tfirstLetter = (hundredkmE < 5) ? 'S' : 'T';\r\n\t\t} else if (hundredkmN < 10) {\r\n\t\t\tfirstLetter = (hundredkmE < 5) ? 'N' : 'O';\r\n\t\t} else {\r\n\t\t\tfirstLetter = (hundredkmE < 5) ? 'H' : 'J';\r\n\t\t}\r\n\r\n\r\n\t\tlet index = 65 + ((4 - (hundredkmN % 5)) * 5) + (hundredkmE % 5);\r\n\r\n\t\tif (index >= 73) {\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\tconst secondLetter = String.fromCharCode(index);\r\n\r\n\t\treturn _e_n_to_gr(\r\n\t\t\tfirstLetter + secondLetter,\r\n\t\t\t(this.x - (100000 * hundredkmE)),\r\n\t\t\t(this.y - (100000 * hundredkmN)),\r\n\t\t\tprecision ? precision : 1\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @return {string} hectad\r\n\t */\r\n\tto_hectad() {\r\n\t\tconst hundredkmE = this.x / 100000 | 0; // Math.floor(easting / 100000);\r\n\t\tconst hundredkmN = this.y / 100000 | 0; // Math.floor(northing / 100000);\r\n\t\tlet firstLetter;\r\n\t\tif (hundredkmN < 5) {\r\n\t\t\tfirstLetter = (hundredkmE < 5) ? 'S' : 'T';\r\n\t\t} else if (hundredkmN < 10) {\r\n\t\t\tfirstLetter = (hundredkmE < 5) ? 'N' : 'O';\r\n\t\t} else {\r\n\t\t\tfirstLetter = (hundredkmE < 5) ? 'H' : 'J';\r\n\t\t}\r\n\r\n\t\tlet index = 65 + ((4 - (hundredkmN % 5)) * 5) + (hundredkmE % 5);\r\n\r\n\t\tif (index >= 73) {\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\treturn firstLetter +\r\n\t\t\tString.fromCharCode(index) + // secondLetter\r\n\t\t\t(((this.x - (100000 * hundredkmE)) / 10000) | 0) +\r\n\t\t\t(((this.y - (100000 * hundredkmN)) / 10000) | 0);\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {boolean}\r\n\t */\r\n\tis_gb_hectad() {\r\n\t\treturn GridCoordsGB.gbHectads.indexOf(this.to_hectad()) !== -1;\r\n\t};\r\n\r\n\t/**\r\n\t * convert easting,northing to a WGS84 lat lng\r\n\t *\r\n\t * @returns {LatLngWGS84}\r\n\t */\r\n\tto_latLng() {\r\n\t\t//airy1830 = RefEll::airy1830(); //new RefEll(6377563.396, 6356256.909);\r\n\t\t//var OSGB_F0  = 0.9996012717;\r\n\t\t//var N0       = -100000.0;\r\n\t\tconst E0 = 400000.0;\r\n\t\tconst phi0 = 0.85521133347722; //deg2rad(49.0);\r\n\t\tconst lambda0 = -0.034906585039887; //deg2rad(-2.0);\r\n\t\tconst a = 6377563.396; // airy1830->maj;\r\n\t\t//var b        = 6356256.909; // airy1830->min;\r\n\t\tconst eSquared = 0.00667054007; // ((maj * maj) - (min * min)) / (maj * maj); // airy1830->ecc;\r\n\t\t//var phi      = 0.0;\r\n\t\t//var lambda   = 0.0;\r\n\t\tconst E = this.x;\r\n\t\tconst N = this.y;\r\n\t\tconst n = 0.0016732203289875; //(a - b) / (a + b);\r\n\t\tlet M;\r\n\t\tlet phiPrime = ((N + 100000) / (a * 0.9996012717)) + phi0;\r\n\r\n\t\t// 15 / 8 === 1.875\r\n\t\t// 5 / 4 === 1.25\r\n\t\t// 21 / 8 === 2.625\r\n\r\n\t\tdo {\r\n\t\t\tM = N + 100000 - (\r\n\t\t\t\t6353722.489 // (b * OSGB_F0)\r\n\t\t\t\t* ((1.0016767257674 // * (((1 + n + (1.25 * n * n) + (1.25 * n * n * n))\r\n\t\t\t\t\t\t* (phiPrime - phi0))\r\n\t\t\t\t\t- (0.00502807228247412 // - (((3 * n) + (3 * n * n) + (2.625 * n * n * n))\r\n\t\t\t\t\t\t* Math.sin(phiPrime - phi0)\r\n\t\t\t\t\t\t* Math.cos(phiPrime + phi0))\r\n\t\t\t\t\t+ (((1.875 * n * n) + (1.875 * n * n * n))\r\n\t\t\t\t\t\t* Math.sin(2.0 * (phiPrime - phi0))\r\n\t\t\t\t\t\t* Math.cos(2.0 * (phiPrime + phi0)))\r\n\t\t\t\t\t- (((35.0 / 24.0) * n * n * n)\r\n\t\t\t\t\t\t* Math.sin(3.0 * (phiPrime - phi0))\r\n\t\t\t\t\t\t* Math.cos(3.0 * (phiPrime + phi0)))));\r\n\r\n\t\t\tphiPrime += M / 6375020.48098897; // (N - N0 - M) / (a * OSGB_F0);\r\n\t\t} while (M >= 0.001);\r\n\r\n\t\tconst sinphiPrime2 = Math.sin(phiPrime) * Math.sin(phiPrime);\r\n\t\tconst tanphiPrime2 = Math.tan(phiPrime) * Math.tan(phiPrime);\r\n\t\tconst secphiPrime = 1.0 / Math.cos(phiPrime);\r\n\r\n\t\tconst v = a * 0.9996012717 * Math.pow(1.0 - eSquared * sinphiPrime2, -0.5);\r\n\r\n\t\tconst rho =\r\n\t\t\ta\r\n\t\t\t* 0.9996012717\r\n\t\t\t* (1.0 - eSquared)\r\n\t\t\t* Math.pow(1.0 - eSquared * sinphiPrime2, -1.5);\r\n\t\tconst etaSquared = (v / rho) - 1.0;\r\n\t\tconst VII = Math.tan(phiPrime) / (2 * rho * v);\r\n\t\tconst VIII =\r\n\t\t\t(Math.tan(phiPrime) / (24.0 * rho * Math.pow(v, 3.0)))\r\n\t\t\t* (5.0\r\n\t\t\t\t+ (3.0 * tanphiPrime2)\r\n\t\t\t\t+ etaSquared\r\n\t\t\t\t- (9.0 * tanphiPrime2 * etaSquared));\r\n\t\tconst IX =\r\n\t\t\t(Math.tan(phiPrime) / (720.0 * rho * Math.pow(v, 5.0)))\r\n\t\t\t* (61.0\r\n\t\t\t\t+ (90.0 * tanphiPrime2)\r\n\t\t\t\t+ (45.0 * tanphiPrime2 * tanphiPrime2));\r\n\t\tconst X = secphiPrime / v;\r\n\t\tconst XI =\r\n\t\t\t(secphiPrime / (6.0 * v * v * v))\r\n\t\t\t* ((v / rho) + (2 * tanphiPrime2));\r\n\t\tconst XII =\r\n\t\t\t(secphiPrime / (120.0 * Math.pow(v, 5.0)))\r\n\t\t\t* (5.0\r\n\t\t\t\t+ (28.0 * tanphiPrime2)\r\n\t\t\t\t+ (24.0 * tanphiPrime2 * tanphiPrime2));\r\n\t\tconst XIIA =\r\n\t\t\t(secphiPrime / (5040.0 * Math.pow(v, 7.0)))\r\n\t\t\t* (61.0\r\n\t\t\t\t+ (662.0 * tanphiPrime2)\r\n\t\t\t\t+ (1320.0 * tanphiPrime2 * tanphiPrime2)\r\n\t\t\t\t+ (720.0\r\n\t\t\t\t\t* tanphiPrime2\r\n\t\t\t\t\t* tanphiPrime2\r\n\t\t\t\t\t* tanphiPrime2));\r\n\t\tconst phi =\r\n\t\t\tphiPrime\r\n\t\t\t- (VII * Math.pow(E - E0, 2.0))\r\n\t\t\t+ (VIII * Math.pow(E - E0, 4.0))\r\n\t\t\t- (IX * Math.pow(E - E0, 6.0));\r\n\t\tconst lambda =\r\n\t\t\tlambda0\r\n\t\t\t+ (X * (E - E0))\r\n\t\t\t- (XI * Math.pow(E - E0, 3.0))\r\n\t\t\t+ (XII * Math.pow(E - E0, 5.0))\r\n\t\t\t- (XIIA * Math.pow(E - E0, 7.0));\r\n\r\n\t\treturn (new LatLngGB(rad2deg * phi, rad2deg * lambda)).to_WGS84();\r\n\t}\r\n}\r\n\r\nexport class GridCoordsIE extends GridCoords {\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcountry = 'IE';\r\n\r\n\t/**\r\n\t * @type {GridCoordsIE}\r\n\t */\r\n\tgridCoords = null;\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} easting metres\r\n\t * @param {number} northing metres\r\n\t * @constructor\r\n\t * @returns {GridCoordsIE}\r\n\t */\r\n\tconstructor(easting, northing) {\r\n\t\tsuper();\r\n\t\tthis.x = easting;\r\n\t\tthis.y = northing;\r\n\t}\r\n\r\n\r\n\tstatic irishGrid = {\r\n\t\t0: ['V', 'Q', 'L', 'F', 'A'],\r\n\t\t1: ['W', 'R', 'M', 'G', 'B'],\r\n\t\t2: ['X', 'S', 'N', 'H', 'C'],\r\n\t\t3: ['Y', 'T', 'O', 'J', 'D']\r\n\t};\r\n\r\n\t/**\r\n\t * convert easting,northing to a WGS84 lat lng\r\n\t *\r\n\t * @returns {LatLngWGS84}\r\n\t */\r\n\tto_latLng() {\r\n\t\t//converts OSI coords to lat/long.\r\n\r\n\t\t// modified from OSGBtoLL, Equations from USGS Bulletin 1532\r\n\t\t//East Longitudes are positive, West longitudes are negative.\r\n\t\t//North latitudes are positive, South latitudes are negative\r\n\t\t//Lat and Long are in decimal degrees.\r\n\t\t//Written by Chuck Gantz- chuck.gantz@globalstar.com\r\n\r\n\t\t// php transliteration by TH\r\n\r\n\t\t//OSIENorthing = this.y;\r\n\t\t//OSIEEasting = this.x;\r\n\r\n\t\t//constants\r\n\t\t//PI = 3.14159265;\r\n\t\t//FOURTHPI = M_PI / 4.0;\r\n\t\t//DEG2RAD = M_PI / 180.0;\r\n\t\t//RAD2DEG = 180.0 / M_PI;\r\n\t\t// ////////////////\r\n\r\n\t\tconst k0 = 1.000035; // scale factor\r\n\t\t//double a;\r\n\t\t//double eccPrimeSquared;\r\n\t\t//double N1, T1, C1, R1, D, M;\r\n\t\tconst LongOrigin = -8.0;\r\n\t\t//LatOrigin = 53.5;\r\n\t\t//LatOriginRad = LatOrigin * DEG2RAD;\r\n\r\n\t\t//UK\r\n\t\t//majoraxis=6377563.396; //Airy\r\n\t\t//a=6377563.396;\r\n\t\t//minoraxis = 6356256.91; //Airy\r\n\r\n\t\t//IE\r\n\t\t//majoraxis = 6377340.189; //Airy\r\n\t\tconst a = 6377340.189;\r\n\t\t//minoraxis = 6356034.447; //Airy\r\n\r\n\t\t//eccSquared = (majoraxis * majoraxis - minoraxis * minoraxis) / (majoraxis * majoraxis);\r\n\t\tconst eccSquared = 0.0066705402933363;\r\n\r\n\t\t//e1 = (1-Math.sqrt(1-eccSquared))/(1+Math.sqrt(1-eccSquared));\r\n\t\tconst e1 = 0.0016732203841521;\r\n\t\t//error_log(\"eccSquared={eccSquared} e1={e1}\");\r\n\r\n\t\t//only calculate M0 once since it is based on the origin of the OSGB projection, which is fixed\r\n\t\t//M0 = a*((1\t- eccSquared/4\t\t- 3*eccSquared*eccSquared/64\t- 5*eccSquared*eccSquared*eccSquared/256)*LatOriginRad\r\n\t\t//\t- (3*eccSquared/8\t+ 3*eccSquared*eccSquared/32\t+ 45*eccSquared*eccSquared*eccSquared/1024)*Math.sin(2*LatOriginRad)\r\n\t\t//\t+ (15*eccSquared*eccSquared/256 + 45*eccSquared*eccSquared*eccSquared/1024)*Math.sin(4*LatOriginRad)\r\n\t\t//\t- (35*eccSquared*eccSquared*eccSquared/3072)*Math.sin(6*LatOriginRad));\r\n\t\t//error_log(\"M0 = {M0}\");\r\n\t\tconst M0 = 5929615.3530033;\r\n\r\n\t\t//OSGBSquareToRefCoords(OSGBZone, RefEasting, RefNorthing); // Assume supplied MapInfo northing and easting take this into account\r\n\t\tconst x = this.x - 200000.0; //remove 400,000 meter false easting for longitude\r\n\t\tconst y = this.y - 250000.0; //remove 100,000 meter false easting for longitude\r\n\r\n\t\t//eccPrimeSquared = (eccSquared)/(1.0-eccSquared);\r\n\t\tconst eccPrimeSquared = 0.0067153352074207;\r\n\t\t//error_log(\"eccPrimeSquared={eccPrimeSquared}\");\r\n\r\n\t\tconst M = M0 + y / k0;\r\n\t\tconst mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\r\n\r\n\t\tconst phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu)\r\n\t\t\t+ (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu)\r\n\t\t\t+ (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\r\n\t\t//phi1 = phi1Rad*RAD2DEG;\r\n\r\n\t\tconst N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\r\n\t\tconst T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\r\n\t\tconst C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\r\n\t\tconst R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\r\n\t\tconst D = x / (N1 * k0);\r\n\r\n\t\tlet Lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24\r\n\t\t\t+ (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\r\n\t\tLat = Lat * rad2deg;\r\n\r\n\t\tlet Long = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1)\r\n\t\t\t* D * D * D * D * D / 120) / Math.cos(phi1Rad);\r\n\r\n\t\tLong = LongOrigin + Long * rad2deg;\r\n\r\n\t\t//return new LatLng(Lat, Long);\r\n\r\n\t\t//var ll = new LatLngIE(Lat, Long); // Irish projection (modified Airy)\r\n\t\t//ll.IE_to_WGS84(); // google earth uses WGS84\r\n\r\n\t\t//return ll;\r\n\r\n\t\treturn (new LatLngIE(Lat, Long)).to_WGS84();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} precision metres\r\n\t * @returns {String}\r\n\t */\r\n\tto_gridref(precision) {\r\n\t\tconst hundredkmE = (this.x / 100000) | 0,\r\n\t\t\thundredkmN = (this.y / 100000) | 0;\r\n\t\tif (GridCoordsIE.irishGrid[hundredkmE] && GridCoordsIE.irishGrid[hundredkmE][hundredkmN]) {\r\n\r\n\t\t\treturn _e_n_to_gr(GridCoordsIE.irishGrid[hundredkmE][hundredkmN],\r\n\t\t\t\t(this.x - (100000 * hundredkmE)),\r\n\t\t\t\t(this.y - (100000 * hundredkmN)),\r\n\t\t\t\tprecision ? precision : 1\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @return {?string} hectad\r\n\t */\r\n\tto_hectad() {\r\n\t\tconst hundredkmE = (this.x / 100000) | 0,\r\n\t\t\thundredkmN = (this.y / 100000) | 0;\r\n\r\n\t\tif (GridCoordsIE.irishGrid[hundredkmE] && GridCoordsIE.irishGrid[hundredkmE][hundredkmN]) {\r\n\t\t\treturn (GridCoordsIE.irishGrid[hundredkmE][hundredkmN]) + Math.floor((this.x % 100000) / 10000) + Math.floor((this.y % 100000) / 10000);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class GridCoordsCI extends GridCoords {\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcountry = 'CI';\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} easting metres\r\n\t * @param {number} northing metres\r\n\t * @constructor\r\n\t * @returns {GridCoordsCI}\r\n\t */\r\n\tconstructor(easting, northing) {\r\n\t\tsuper();\r\n\r\n\t\tthis.x = easting;\r\n\t\tthis.y = northing;\r\n\t}\r\n\r\n\t/**\r\n\t * convert easting,northing to a WGS84 lat lng\r\n\t *\r\n\t * @returns {LatLngWGS84}\r\n\t */\r\n\tto_latLng() {\r\n\t\t//nX = north;\r\n\t\t//ex = east;\r\n\r\n\t\tconst a = 6378388.000;       // INT24 ED50 semi-major\r\n\t\tconst b = 6356911.946;       // INT24 ED50 semi-minor\r\n\t\tconst e0 = 500000;           // easting of false origin\r\n\t\tconst n0 = 0;                // northing of false origin\r\n\t\tconst f0 = 0.9996;           // INT24 ED50 scale factor on central meridian\r\n\t\tconst e2 = 0.0067226700223333;  // INT24 ED50 eccentricity squared\r\n\t\tconst lam0 = -0.0523598775598;  // INT24 ED50 false east\r\n\t\tconst phi0 = 0; //0 * deg2rad;    // INT24 ED50 false north\r\n\r\n\t\tconst af0 = a * f0;\r\n\t\tconst bf0 = b * f0;\r\n\t\tconst n = (af0 - bf0) / (af0 + bf0);\r\n\t\tconst Et = this.x - e0;\r\n\t\tconst phid = GridCoordsCI._initial_lat(this.y, n0, af0, phi0, n, bf0);\r\n\t\tconst nu = af0 / (Math.sqrt(1 - (e2 * (Math.sin(phid) * Math.sin(phid)))));\r\n\t\tconst rho = (nu * (1 - e2)) / (1 - (e2 * (Math.sin(phid)) * (Math.sin(phid))));\r\n\t\tconst eta2 = (nu / rho) - 1;\r\n\t\tconst tlat2 = Math.tan(phid) * Math.tan(phid);\r\n\t\tconst tlat4 = Math.pow(Math.tan(phid), 4);\r\n\t\tconst tlat6 = Math.pow(Math.tan(phid), 6);\r\n\t\tconst clatm1 = Math.pow(Math.cos(phid), -1);\r\n\t\tconst VII = Math.tan(phid) / (2 * rho * nu);\r\n\t\tconst VIII = (Math.tan(phid) / (24 * rho * (nu * nu * nu))) * (5 + (3 * tlat2) + eta2 - (9 * eta2 * tlat2));\r\n\t\tconst IX = ((Math.tan(phid)) / (720 * rho * Math.pow(nu, 5))) * (61 + (90 * tlat2) + (45 * tlat4));\r\n\t\tconst phip = (phid - ((Et * Et) * VII) + (Math.pow(Et, 4) * VIII) - (Math.pow(Et, 6) * IX));\r\n\t\tconst X = Math.pow(Math.cos(phid), -1) / nu;\r\n\t\tconst XI = (clatm1 / (6 * (nu * nu * nu))) * ((nu / rho) + (2 * (tlat2)));\r\n\t\tconst XII = (clatm1 / (120 * Math.pow(nu, 5))) * (5 + (28 * tlat2) + (24 * tlat4));\r\n\t\tconst XIIA = clatm1 / (5040 * Math.pow(nu, 7)) * (61 + (662 * tlat2) + (1320 * tlat4) + (720 * tlat6));\r\n\t\tconst lambdap = (lam0 + (Et * X) - ((Et * Et * Et) * XI) + (Math.pow(Et, 5) * XII) - (Math.pow(Et, 7) * XIIA));\r\n\r\n\t\t// var WGS84_AXIS = 6378137;\r\n\t\t// var WGS84_ECCENTRIC = 0.00669438037928458;\r\n\t\t//\r\n\t\t// var INT24_AXIS = 6378388.000;\r\n\t\t// var INT24_ECCENTRIC = 0.0067226700223333;\r\n\t\t// var height = 10;  // dummy height\r\n\t\t// //var latLngRadians = LatLng._transform(phip, lambdap, INT24_AXIS, INT24_ECCENTRIC, height, WGS84_AXIS, WGS84_ECCENTRIC, -83.901, -98.127, -118.635, 0, 0, 0, 0);\r\n\r\n\t\tconst latLngRadians = GridCoordsCI._convert_to_wgs(phip, lambdap);\r\n\t\treturn new LatLngWGS84(latLngRadians.lat * rad2deg, latLngRadians.lng * rad2deg);\r\n\r\n\t\t//return (new LatLngCI(rad2deg * phip, rad2deg * lambdap)).to_WGS84()\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} precision metres\r\n\t * @returns {?string}\r\n\t */\r\n\tto_gridref(precision) {\r\n\t\tif (this.y >= 5500000) {\r\n\t\t\treturn _e_n_to_gr('WA', this.x - 500000, this.y - 5500000, precision ? precision : 1);\r\n\t\t} else if (this.y < 5500000) {\r\n\t\t\treturn _e_n_to_gr('WV', this.x - 500000, this.y - 5400000, precision ? precision : 1);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {?string}\r\n\t */\r\n\tto_hectad() {\r\n\t\tif (this.y > 5500000) {\r\n\t\t\treturn 'WA' + this.x.toString().substring(1, 2) + this.y.toString().substring(2, 3);\r\n\t\t} else if (this.y < 5500000) {\r\n\t\t\treturn 'WV' + this.x.toString().substring(1, 2) + this.y.toString().substring(2, 3);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tstatic _convert_to_wgs (phip, lambdap) {\r\n\t\tconst WGS84_AXIS = 6378137;\r\n\t\tconst WGS84_ECCENTRIC = 0.00669438037928458;\r\n\t\t//OSGB_AXIS = 6377563.396;\r\n\t\t//OSGB_ECCENTRIC = 0.0066705397616;\r\n\t\t//IRISH_AXIS = 6377340.189;\r\n\t\t//IRISH_ECCENTRIC = 0.00667054015;\r\n\t\tconst INT24_AXIS = 6378388.000;\r\n\t\tconst INT24_ECCENTRIC = 0.0067226700223333;\r\n\t\tconst height = 10;  // dummy height\r\n\t\treturn LatLng._transform(phip, lambdap, INT24_AXIS, INT24_ECCENTRIC, height, WGS84_AXIS, WGS84_ECCENTRIC, -83.901, -98.127, -118.635, 0, 0, 0, 0);\r\n\t}\r\n\r\n\tstatic _initial_lat (north, n0, af0, phi0, n, bf0) {\r\n\t\tlet phi1 = ((north - n0) / af0) + phi0;\r\n\t\tlet M = LatLng._Marc(bf0, n, phi0, phi1);\r\n\t\tlet phi2 = ((north - n0 - M) / af0) + phi1;\r\n\t\tlet ind = 0;\r\n\t\twhile ((Math.abs(north - n0 - M) > 0.00001) && (ind < 20))  // max 20 iterations in case of error\r\n\t\t{\r\n\t\t\tind += 1;\r\n\t\t\tphi2 = ((north - n0 - M) / af0) + phi1;\r\n\t\t\tM = LatLng._Marc(bf0, n, phi0, phi2);\r\n\t\t\tphi1 = phi2;\r\n\t\t}\r\n\t\treturn phi2;\r\n\t}\r\n}\r\n","import {GridCoords, TETRAD_LETTERS} from \"../GridCoords/GridCoords\";\r\n\r\n /**\r\n * x,y offsets (in metres) for tetrad letter codes\r\n * @type {Object.<string,Array.<number>>}\r\n */\r\n\r\n export const TETRAD_OFFSETS = {\r\n\tE: [0, 8000], J: [2000, 8000], P: [4000, 8000], U: [6000, 8000], Z: [8000, 8000],\r\n\tD: [0, 6000], I: [2000, 6000], N: [4000, 6000], T: [6000, 6000], Y: [8000, 6000],\r\n\tC: [0, 4000], H: [2000, 4000], M: [4000, 4000], S: [6000, 4000], X: [8000, 4000],\r\n\tB: [0, 2000], G: [2000, 2000], L: [4000, 2000], R: [6000, 2000], W: [8000, 2000],\r\n\tA: [0, 0], F: [2000, 0], K: [4000, 0], Q: [6000, 0], V: [8000, 0]\r\n};\r\n\r\n/**\r\n * x,y offsets (in metres) for quadrant codes\r\n * @type {{SE: number[], SW: number[], NE: number[], NW: number[]}}\r\n */\r\nexport const QUADRANT_OFFSETS = {\r\n\tNW: [0, 5000],\r\n\tNE: [5000, 5000],\r\n\tSW: [0, 0],\r\n\tSE: [5000, 0]\r\n};\r\n\r\nexport class GridRef {\r\n\r\n\t// /**\r\n\t//  * x,y offsets (in metres) for tetrad letter codes\r\n\t//  * @type {Object.<string,Array.<number>>}\r\n\t//  */\r\n\t// static tetradOffsets = {\r\n\t// \tE: [0, 8000], J: [2000, 8000], P: [4000, 8000], U: [6000, 8000], Z: [8000, 8000],\r\n\t// \tD: [0, 6000], I: [2000, 6000], N: [4000, 6000], T: [6000, 6000], Y: [8000, 6000],\r\n\t// \tC: [0, 4000], H: [2000, 4000], M: [4000, 4000], S: [6000, 4000], X: [8000, 4000],\r\n\t// \tB: [0, 2000], G: [2000, 2000], L: [4000, 2000], R: [6000, 2000], W: [8000, 2000],\r\n\t// \tA: [0, 0], F: [2000, 0], K: [4000, 0], Q: [6000, 0], V: [8000, 0]\r\n\t// };\r\n\r\n\t// /**\r\n\t//  * x,y offsets (in metres) for quadrant codes\r\n\t//  * @type {{SE: number[], SW: number[], NE: number[], NW: number[]}}\r\n\t//  */\r\n\t// static quadrantOffsets = {\r\n\t// \tNW: [0, 5000],\r\n\t// \tNE: [5000, 5000],\r\n\t// \tSW: [0, 0],\r\n\t// \tSE: [5000, 0]\r\n\t// };\r\n\r\n\t// /**\r\n\t//  * numerical mapping of letters to numbers\r\n\t//  * 'I' is omitted\r\n\t//  *\r\n\t//  * @type {{A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number, J: number, K: number, L: number, M: number, N: number, O: number, P: number, Q: number, R: number, S: number, T: number, U: number, V: number, W: number, X: number, Y: number, Z: number}}\r\n\t//  */\r\n\t// static letterMapping = {\r\n\t// \tA: 0, B: 1, C: 2, D: 3, E: 4, F: 5, G: 6, H: 7, J: 8, K: 9,\r\n\t// \tL: 10, M: 11, N: 12, O: 13, P: 14, Q: 15, R: 16, S: 17, T: 18,\r\n\t// \tU: 19, V: 20, W: 21, X: 22, Y: 23, Z: 24\r\n\t// };\r\n\r\n\r\n\t// /**\r\n\t//  * tetrad letters ordered by easting then northing (steps of 2000m)\r\n\t//  * i.e. (x*4) + y\r\n\t//  *\r\n\t//  * where x and y are integer of (10km remainder / 2)\r\n\t//  *\r\n\t//  * @type {string}\r\n\t//  */\r\n\t// static tetradLetters = 'ABCDEFGHIJKLMNPQRSTUVWXYZ';\r\n\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpreciseGridRef = '';\r\n\r\n\t/**\r\n\t * length in m (0 marks an invalid value)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlength = 0;\r\n\r\n\t/**\r\n\t * @type {string}\r\n\t */\r\n\thectad = '';\r\n\r\n\t/**\r\n\t * 10km ref with tetrad suffix or ''\r\n\t * e.g. SD59A\r\n\t * @type {string}\r\n\t */\r\n\ttetrad = '';\r\n\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttetradLetter = '';\r\n\r\n\t/**\r\n\t * quadrant gridref(e.g. NZ34NW)\r\n\t * only set if gridref is defined at 5km or <=1km precision\r\n\t * undefined by default so need to use getter\r\n\t *\r\n\t * read using GridRef::get_quadrant\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tquadrant = '';\r\n\r\n\t/**\r\n\t * quadrant code suffix(e.g. NW, NE, SW, SE)\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tquadrantCode = '';\r\n\r\n\t/**\r\n\t *\r\n\t * @type {GridCoords|null}\r\n\t */\r\n\tgridCoords = null;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\terror = false;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\terrorMessage = '';\r\n\r\n\tget centrePoint() {\r\n\t\tconst centre = new GridCoords();\r\n\t\tconst halfLength = Math.floor(this.length / 2);\r\n\r\n\t\tcentre.x = this.gridCoords.x + halfLength;\r\n\t\tcentre.y = this.gridCoords.y + halfLength;\r\n\t\treturn centre;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {GridCoords} gridCoords centre-point to test\r\n\t * @param {number} radius default 0 for absolute point\r\n\t */\r\n\tsquareIntersectsPoint(gridCoords, radius = 1) {\r\n\t\t// const hX = gridCoords.x + this.length;\r\n\t\t// const hy = gridCoords.y + this.length;\r\n\r\n\t\tif (radius === 1) {\r\n\t\t\treturn (this.gridCoords.x <= gridCoords.x && this.gridCoords.x + this.length > gridCoords.x\r\n\t\t\t\t&& this.gridCoords.y <= gridCoords.y && this.gridCoords.y + this.length > gridCoords.y);\r\n\t\t} else {\r\n\t\t\treturn GridRef._checkOverlap(\r\n\t\t\t\tradius,\r\n\t\t\t\tgridCoords.x, gridCoords.y,\r\n\t\t\t\tthis.gridCoords.x, this.gridCoords.y,\r\n\t\t\t\tthis.gridCoords.x + this.length, this.gridCoords.y + this.length\r\n\t\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * check if any point overlaps the given circle and rectangle\r\n\t * see https://www.geeksforgeeks.org/check-if-any-point-overlaps-the-given-circle-and-rectangle/\r\n\t *\r\n\t * @param {number} R\r\n\t * @param {number} Xc\r\n\t * @param {number} Yc\r\n\t * @param {number} X1\r\n\t * @param {number} Y1\r\n\t * @param {number} X2\r\n\t * @param {number} Y2\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic _checkOverlap(R, Xc, Yc, X1, Y1, X2, Y2) {\r\n\r\n\t\t// Find the nearest point on the\r\n\t\t// rectangle to the center of\r\n\t\t// the circle\r\n\t\tlet Xn = Math.max(X1, Math.min(Xc, X2));\r\n\t\tlet Yn = Math.max(Y1, Math.min(Yc, Y2));\r\n\r\n\t\t// Find the distance between the\r\n\t\t// nearest point and the center\r\n\t\t// of the circle\r\n\t\t// Distance between 2 points,\r\n\t\t// (x1, y1) & (x2, y2) in\r\n\t\t// 2D Euclidean space is\r\n\t\t// ((x1-x2)**2 + (y1-y2)**2)**0.5\r\n\t\tlet Dx = Xn - Xc;\r\n\t\tlet Dy = Yn - Yc;\r\n\t\treturn (Dx * Dx + Dy * Dy) <= R * R;\r\n\t}\r\n\r\n\t/**\r\n\t * Update tetrad using Easting/Northing values (metres)\r\n\t * Hectad should have been set prior to calling.\r\n\t */\r\n\tset_tetrad() {\r\n\t\tthis.tetradLetter = TETRAD_LETTERS.charAt(\r\n\t\t\t((Math.floor((this.gridCoords.x % 10000) / 1000) >> 1) * 5) + (Math.floor((this.gridCoords.y % 10000) / 1000) >> 1));\r\n\r\n\t\tif (!this.tetradLetter) {\r\n\t\t\tthrow new Error(\"Failed to get tetrad letter when processing '\" + this.preciseGridRef + \"', easting=\" + this.gridCoords.x + \" northing=\" + this.gridCoords.y);\r\n\t\t}\r\n\t\tthis.tetrad = this.hectad + this.tetradLetter;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} rawPrecision\r\n\t * @param {number} [minPrecision]\r\n\t * @returns {number}\r\n\t */\r\n\tstatic getNormalizedPrecision(rawPrecision, minPrecision) {\r\n\t\treturn rawPrecision > 2000 ? 10000 :\r\n\t\t\t(rawPrecision > 1000 ? 2000 :\r\n\t\t\t\t\t(rawPrecision > 100 ? 1000 :\r\n\t\t\t\t\t\t\t(rawPrecision > 10 ? 100 :\r\n\t\t\t\t\t\t\t\t\t(rawPrecision > 1 ? 10 :\r\n\t\t\t\t\t\t\t\t\t\t\tminPrecision ? minPrecision : 1\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * used for GB grid-refs and invoked as parent for the Channel Islands\r\n\t *\r\n\t * @param {?number} significantPrecision default null (precision in metres of centroid diameter)\r\n\t *\r\n\t * @return {string}\r\n\t */\r\n\ttoHtml(significantPrecision = null) {\r\n\t\tlet formattedGr;\r\n\r\n\t\tif (!significantPrecision || significantPrecision === this.length) {\r\n\t\t\tif (this.length <= 1000) {\r\n\t\t\t\tlet halfNumLen = ((this.preciseGridRef.length - 2) / 2) | 0;\r\n\t\t\t\tformattedGr = this.preciseGridRef.substring(0, 2) +\r\n\t\t\t\t\t\"<span class='sig'>\" + this.preciseGridRef.substring(2, 2 + halfNumLen) +\r\n\t\t\t\t\t\"</span><span class='sig'>\" + this.preciseGridRef.substring(2 + halfNumLen) + \"</span>\";\r\n\t\t\t} else {\r\n\t\t\t\tformattedGr = this.preciseGridRef;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.length === 2000) {\r\n\t\t\t\t// reduced precision means greying the tetrad code\r\n\r\n\t\t\t\tformattedGr = `${this.hectad}<span class='nonsig'>${this.tetradLetter}</span>`;\r\n\t\t\t} else if (this.length === 5000) {\r\n\t\t\t\t// reduced precision means greying the quadrant code\r\n\r\n\t\t\t\tformattedGr = `${this.hectad}<span class='nonsig'>${this.quadrantCode}</span>`;\r\n\t\t\t} else {\r\n\t\t\t\tif (significantPrecision > 5000) {\r\n\t\t\t\t\t// large and probably spurious precision value - so grey-out the entire grid-reference\r\n\t\t\t\t\tformattedGr = `<span class='nonsig'>${this.preciseGridRef}</span>`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet columns = (5 + Math.log10(1 / significantPrecision)) | 0; // number of sig figures\r\n\t\t\t\t\tlet halfNumLen = ((this.preciseGridRef.length - 2) / 2) | 0;\r\n\r\n\t\t\t\t\tformattedGr = this.preciseGridRef.substring(0, 2) + \"<span class='sig'>\" + this.preciseGridRef.substring(2, 2 + columns) + \"</span>\" +\r\n\t\t\t\t\t\t\"<span class='nonsig'>\" + this.preciseGridRef.substring(columns + 2, 2 + halfNumLen) + \"</span>\" +\r\n\t\t\t\t\t\t\"<span class='sig'>\" + this.preciseGridRef.substring(2 + halfNumLen, 2 + halfNumLen + columns) + \"</span>\" +\r\n\t\t\t\t\t\t\"<span class='nonsig'>\" + this.preciseGridRef.substring(2 + halfNumLen + columns) + \"</span>\"\r\n\t\t\t\t\t;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn formattedGr;\r\n\t}\r\n\r\n\t/**\r\n\t * Interleaves xy co-ordinate pairs at each resolution\r\n\t * also includes hectad level precision as a separate 5 x 5 tier\r\n\t * DOES NOT SUPPORT QUADRANTS, which are stripped out.\r\n\t *\r\n\t * @param {string} gridRefString\r\n\t * @return {string}\r\n\t * @throws Error\r\n\t */\r\n\tstatic interleave(gridRefString) {\r\n\t\tif (!gridRefString) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\tlet tetrad;\r\n\r\n\t\tif (gridRefString.length > 3) {\r\n\r\n\t\t\tif (gridRefString.includes('NENWSESW', gridRefString.length - 2)) {\r\n\t\t\t//if (str_contains('NENWSESW', substr(gridRefString, -2))) {\r\n\r\n\t\t\t\tgridRefString = gridRefString.substring(0, gridRefString.length - 2);\r\n\t\t\t\ttetrad = '';\r\n\r\n\t\t\t} else if (gridRefString.substring(gridRefString.length - 1).match(/a-z/i)) {\r\n\t\t\t//} else if (ctype_alpha(substr(gridRefString, -1))) {\r\n\r\n\t\t\t\tlet o = TETRAD_LETTERS.indexOf(gridRefString.substring(gridRefString.length - 1))\r\n\t\t\t\t//let o = strpos(TETRAD_LETTERS, substr(gridRefString, -1));\r\n\r\n\t\t\t\tgridRefString = gridRefString.substring(0, gridRefString.length - 1);\r\n\t\t\t\ttetrad = `${(o / 5)|0}${o % 5}`;\r\n\t\t\t} else {\r\n\t\t\t\ttetrad = '';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttetrad = '';\r\n\t\t}\r\n\r\n\t\tswitch (gridRefString.length) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn '';\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\treturn `_${gridRefString}`;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\treturn gridRefString;\r\n\r\n\t\t\tcase 3:\r\n\t\t\t\treturn `_${gridRefString}${tetrad}`;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\treturn `${gridRefString}${tetrad}`;\r\n\r\n\t\t\tcase 5:\r\n\t\t\t\treturn `_${gridRefString.substring(0, 2)}${gridRefString[3]}${gridRefString[2] >> 1}${gridRefString[4] >> 1}${gridRefString[2]}${gridRefString[4]}`;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\treturn `${gridRefString.substring(0, 3)}${gridRefString[4]}${gridRefString[3] >> 1}${gridRefString[5] >> 1}${gridRefString[3]}${gridRefString[5]}`;\r\n\r\n\t\t\tcase 7:\r\n\t\t\t\treturn `_${gridRefString.substring(0, 2)}${gridRefString[4]}${gridRefString[2] >> 1}${gridRefString[5] >> 1}${gridRefString[2]}${gridRefString[5]}${gridRefString[3]}${gridRefString[6]}`;\r\n\r\n\t\t\tcase 8:\r\n\t\t\t\treturn `${gridRefString.substring(0, 3)}${gridRefString[5]}${gridRefString[3] >> 1}${gridRefString[6] >> 1}${gridRefString[3]}${gridRefString[6]}${gridRefString[4]}${gridRefString[7]}`;\r\n\r\n\t\t\tcase 9:\r\n\t\t\t\treturn `_${gridRefString.substring(0, 2)}${gridRefString[5]}${gridRefString[2] >> 1}${gridRefString[6] >> 1}${gridRefString[2]}${gridRefString[6]}${gridRefString[3]}${gridRefString[7]}${gridRefString[4]}${gridRefString[8]}`;\r\n\r\n\t\t\tcase 10:\r\n\t\t\t\treturn `${gridRefString.substring(0, 3)}${gridRefString[6]}${gridRefString[3] >> 1}${gridRefString[7] >> 1}${gridRefString[3]}${gridRefString[7]}${gridRefString[4]}${gridRefString[8]}${gridRefString[5]}${gridRefString[9]}`;\r\n\r\n\t\t\tcase 11:\r\n\t\t\t\treturn `_${gridRefString.substring(0, 2)}${gridRefString[6]}${gridRefString[2] >> 1}${gridRefString[7] >> 1}${gridRefString[2]}${gridRefString[7]}${gridRefString[3]}${gridRefString[8]}${gridRefString[4]}${gridRefString[9]}${gridRefString[5]}${gridRefString[10]}`;\r\n\r\n\t\t\tcase 12:\r\n\t\t\t\treturn `${gridRefString.substring(0, 3)}${gridRefString[7]}${gridRefString[3] >> 1}${gridRefString[8] >> 1}${gridRefString[3]}${gridRefString[8]}${gridRefString[4]}${gridRefString[9]}${gridRefString[5]}${gridRefString[10]}${gridRefString[6]}${gridRefString[11]}`;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Bad grid-ref length '${gridRefString.length}' for interleaving.`);\r\n\t\t}\r\n\r\n\t\t// return match (strlen(gridRefString)) {\r\n\t\t// \t    0 => '',\r\n\t\t// \t\t1 => \"_{gridRefString}\",\r\n\t\t// \t\t2 => gridRefString,\r\n\t\t// \t\t3 => \"_{gridRefString}{tetrad}\",\r\n\t\t// \t\t4 => \"{gridRefString}{tetrad}\",\r\n\t\t// \t\t5 => \"_\" . substr(gridRefString, 0, 2) . gridRefString[3] . (gridRefString[2] >> 1) . (gridRefString[4] >> 1) . gridRefString[2] . gridRefString[4],\r\n\t\t// \t\t6 => substr(gridRefString, 0, 3) . gridRefString[4] . (gridRefString[3] >> 1) . (gridRefString[5] >> 1) . gridRefString[3] . gridRefString[5],\r\n\t\t// \t\t7 => '_' . substr(gridRefString, 0, 2) . gridRefString[4] . (gridRefString[2] >> 1) . (gridRefString[5] >> 1) . gridRefString[2] . gridRefString[5] . gridRefString[3] . gridRefString[6],\r\n\t\t// \t\t8 => substr(gridRefString, 0, 3) . gridRefString[5] . (gridRefString[3] >> 1) . (gridRefString[6] >> 1) . gridRefString[3] . gridRefString[6] . gridRefString[4] . gridRefString[7],\r\n\t\t// \t\t9 => '_' . substr(gridRefString, 0, 2) . gridRefString[5] . (gridRefString[2] >> 1) . (gridRefString[6] >> 1) . gridRefString[2] . gridRefString[6] . gridRefString[3] . gridRefString[7] . gridRefString[4] . gridRefString[8],\r\n\t\t// \t\t10 => substr(gridRefString, 0, 3) . gridRefString[6] . (gridRefString[3] >> 1) . (gridRefString[7] >> 1) . gridRefString[3] . gridRefString[7] . gridRefString[4] . gridRefString[8] . gridRefString[5] . gridRefString[9],\r\n\t\t// \t\t11 => '_' . substr(gridRefString, 0, 2) . gridRefString[6] . (gridRefString[2] >> 1) . (gridRefString[7] >> 1) . gridRefString[2] . gridRefString[7] . gridRefString[3] . gridRefString[8] . gridRefString[4] . gridRefString[9] . gridRefString[5] . gridRefString[10],\r\n\t\t// \t\t12 => substr(gridRefString, 0, 3) . gridRefString[7] . (gridRefString[3] >> 1) . (gridRefString[8] >> 1) . gridRefString[3] . gridRefString[8] . gridRefString[4] . gridRefString[9] . gridRefString[5] . gridRefString[10] . gridRefString[6] . gridRefString[11],\r\n\t\t// \tdefault => throw new Exception(\"Bad gridref length '\" . strlen(gridRefString) . \"' for interleaving.\"),\r\n\t\t// };\r\n\t}\r\n}\r\n","import {GridRef, QUADRANT_OFFSETS, TETRAD_OFFSETS} from './GridRef';\r\nimport {GridCoordsCI} from '../GridCoords/GridCoords';\r\n\r\nexport class GridRefCI extends GridRef {\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcountry = 'CI';\r\n\r\n\t/**\r\n\t *\r\n\t * @type {typeof GridCoordsCI}\r\n\t */\r\n\tGridCoords = GridCoordsCI;\r\n\r\n\t/**\r\n\t * @type {GridCoordsCI}\r\n\t */\r\n\tgridCoords = null;\r\n\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.parse_well_formed = this.fromString;\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string} rawGridRef\r\n\t * @throws Error\r\n\t */\r\n\tfromString(rawGridRef) {\r\n\t\tlet trimmedLocality = rawGridRef.replace(/[\\[\\]\\s\\t.\\/-]+/gu, '').toUpperCase();\r\n\t\tlet tetradCode = '';\r\n\t\tlet enl;\r\n\r\n\t\tif (/[ABCDEFGHIJKLMNPQRSTUVWXYZ]$/.test(trimmedLocality)) {\r\n\t\t\t// tetrad or quadrant\r\n\r\n\t\t\tif (QUADRANT_OFFSETS.hasOwnProperty(trimmedLocality.substring(trimmedLocality.length - 2))) {\r\n\t\t\t\tthis.quadrantCode = trimmedLocality.substring(trimmedLocality.length - 2);\r\n\t\t\t\ttrimmedLocality = trimmedLocality.substring(0, trimmedLocality.length - 2);\r\n\t\t\t} else {\r\n\t\t\t\ttetradCode = trimmedLocality.charAt(trimmedLocality.length - 1);\r\n\t\t\t\ttrimmedLocality = trimmedLocality.substring(0, trimmedLocality.length - 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (/^(W[AV](?:\\d\\d){1,5})$/.test(trimmedLocality)) {\r\n\t\t\tif ((enl = GridRefCI.gridref_string_to_e_n_l(trimmedLocality))) {\r\n\t\t\t\tthis.length = enl.length;\r\n\r\n\t\t\t\tthis.gridCoords = new GridCoordsCI(enl.e, enl.n);\r\n\t\t\t\tthis.hectad = this.gridCoords.to_gridref(10000);\r\n\r\n\t\t\t\tif (this.length === 10000 && (tetradCode || this.quadrantCode)) {\r\n\t\t\t\t\tif (tetradCode) {\r\n\t\t\t\t\t\tthis.preciseGridRef = trimmedLocality + tetradCode;\r\n\t\t\t\t\t\tthis.tetrad = this.hectad + tetradCode;\r\n\t\t\t\t\t\tthis.tetradLetter = tetradCode;\r\n\t\t\t\t\t\tthis.length = 2000; // 2km square\r\n\t\t\t\t\t\tthis.gridCoords.x += TETRAD_OFFSETS[tetradCode][0];\r\n\t\t\t\t\t\tthis.gridCoords.y += TETRAD_OFFSETS[tetradCode][1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// quadrant\r\n\t\t\t\t\t\tthis.preciseGridRef = trimmedLocality + this.quadrantCode;\r\n\t\t\t\t\t\tthis.tetradLetter = '';\r\n\t\t\t\t\t\tthis.tetrad = '';\r\n\t\t\t\t\t\tthis.quadrant = this.preciseGridRef;\r\n\t\t\t\t\t\tthis.length = 5000; // 5km square\r\n\t\t\t\t\t\tthis.gridCoords.x += QUADRANT_OFFSETS[this.quadrantCode][0];\r\n\t\t\t\t\t\tthis.gridCoords.y += QUADRANT_OFFSETS[this.quadrantCode][1];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.preciseGridRef = trimmedLocality;\r\n\r\n\t\t\t\t\tif (this.length <= 1000) {\r\n\t\t\t\t\t\t// calculate tetrad for precise gridref\r\n\t\t\t\t\t\tthis.set_tetrad();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.error = true;\r\n\t\t\t\tthis.errorMessage = 'Grid reference format not understood (odd length).';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// no match\r\n\t\t\tthis.error = true;\r\n\t\t\tthis.errorMessage = \"Channel Island grid reference format not understood. ('\" + rawGridRef + \"')\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} gridRef plain string without tetrad or quadrant suffix\r\n\t * @return {(boolean|{e : number, n : number, length : number})}\r\n\t * returns false on error or object {'e' : easting, 'n' : northing, 'length' : length}\r\n\t */\r\n\tstatic gridref_string_to_e_n_l(gridRef) {\r\n\t\tlet northOffset, x, y, length;\r\n\r\n\t\t// assume modern alphabetical sheet ref\r\n\t\tlet chars = gridRef.substring(0, 2);\r\n\r\n\t\tif (chars === 'WA') {\r\n\t\t\tnorthOffset = 5500000;\r\n\t\t} else if (chars === 'WV') {\r\n\t\t\tnorthOffset = 5400000;\r\n\t\t} else {\r\n\t\t\tconsole.log(\"Bad Channel Island grid letters: '\" + chars + \"'\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet ref = gridRef.substring(2);\r\n\t\tswitch (ref.length) {\r\n\t\t\tcase 2:\r\n\t\t\t\tx = ref.charAt(0) * 10000;\r\n\t\t\t\ty = ref.charAt(1) * 10000;\r\n\t\t\t\tlength = 10000; //10 km square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tx = ref.substring(0, 2) * 1000;\r\n\t\t\t\ty = ref.substring(2) * 1000;\r\n\t\t\t\tlength = 1000; //1 km square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tx = ref.substring(0, 3) * 100;\r\n\t\t\t\ty = ref.substring(3) * 100;\r\n\t\t\t\tlength = 100; //100m square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 8:\r\n\t\t\t\tx = ref.substring(0, 4) * 10;\r\n\t\t\t\ty = ref.substring(4) * 10;\r\n\t\t\t\tlength = 10; //10m square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 10:\r\n\t\t\t\tx = parseInt(ref.substring(0, 5), 10);\r\n\t\t\t\ty = parseInt(ref.substring(5), 10);\r\n\t\t\t\tlength = 1; //1m square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"Bad length for Channel Island grid ref '\" + gridRef + \"'\");\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\te: (x + 500000),\r\n\t\t\tn: (y + northOffset),\r\n\t\t\tlength: length\r\n\t\t};\r\n\t}\r\n}\r\n","import {GridRef, QUADRANT_OFFSETS, TETRAD_OFFSETS} from './GridRef';\r\nimport {GridCoordsGB} from '../GridCoords/GridCoords';\r\n\r\n/**\r\n * numerical mapping of letters to numbers\r\n * 'I' is omitted\r\n *\r\n * @type {{A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number, J: number, K: number, L: number, M: number, N: number, O: number, P: number, Q: number, R: number, S: number, T: number, U: number, V: number, W: number, X: number, Y: number, Z: number}}\r\n */\r\nconst LETTER_MAPPING = {\r\n\tA: 0, B: 1, C: 2, D: 3, E: 4, F: 5, G: 6, H: 7, J: 8, K: 9,\r\n\tL: 10, M: 11, N: 12, O: 13, P: 14, Q: 15, R: 16, S: 17, T: 18,\r\n\tU: 19, V: 20, W: 21, X: 22, Y: 23, Z: 24\r\n};\r\n\r\nexport class GridRefGB extends GridRef {\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcountry = 'GB';\r\n\r\n\t/**\r\n\t *\r\n\t * @type {typeof GridCoordsGB}\r\n\t */\r\n\tGridCoords = GridCoordsGB;\r\n\r\n\t/**\r\n\t * @type {GridCoordsGB}\r\n\t */\r\n\tgridCoords = null;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * gridref known to have correct syntax\r\n\t * may have tetrad or quadrant suffix\r\n\t *\r\n\t * @param {string} rawGridRef\r\n\t * @throws Error\r\n\t */\r\n\tparse_well_formed(rawGridRef) {\r\n\r\n\t\tif (rawGridRef.length >= 5 && /^[A-Z]/.test(rawGridRef.charAt(4))) {\r\n\t\t\t// tetrad or quadrant\r\n\r\n\t\t\tif (QUADRANT_OFFSETS.hasOwnProperty(rawGridRef.substring(rawGridRef.length - 2))) {\r\n\t\t\t\tthis.quadrantCode = rawGridRef.substring(rawGridRef.length - 2);\r\n\t\t\t} else {\r\n\t\t\t\tthis.tetradLetter = rawGridRef.charAt(4);\r\n\t\t\t}\r\n\r\n\t\t\trawGridRef = rawGridRef.substring(0, 4);\r\n\t\t}\r\n\r\n\t\t//this sets easting/northing, length and hectad\r\n\t\tthis.parse_wellformed_gb_gr_string_no_tetrads(rawGridRef);\r\n\r\n\t\tif (this.tetradLetter || this.quadrantCode) {\r\n\t\t\t// tetrad or quadrant suffix\r\n\r\n\t\t\tif (this.tetradLetter) {\r\n\t\t\t\tthis.preciseGridRef = this.tetrad = this.hectad + this.tetradLetter;\r\n\t\t\t\tthis.length = 2000; // 2km square\r\n\t\t\t\tthis.gridCoords.x += TETRAD_OFFSETS[this.tetradLetter][0];\r\n\t\t\t\tthis.gridCoords.y += TETRAD_OFFSETS[this.tetradLetter][1];\r\n\t\t\t} else {\r\n\t\t\t\t// quadrant\r\n\t\t\t\tthis.preciseGridRef = this.quadrant = rawGridRef + this.quadrantCode;\r\n\t\t\t\tthis.length = 5000; // 5km square\r\n\t\t\t\tthis.gridCoords.x += QUADRANT_OFFSETS[this.quadrantCode][0];\r\n\t\t\t\tthis.gridCoords.y += QUADRANT_OFFSETS[this.quadrantCode][1];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.preciseGridRef = rawGridRef;\r\n\r\n\t\t\tif (this.length <= 1000) {\r\n\t\t\t\t// calculate tetrad for precise gridref\r\n\t\t\t\tthis.set_tetrad();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string} rawGridRef\r\n\t * @throws Error\r\n\t */\r\n\tfromString(rawGridRef) {\r\n\t\t// grid ref may not be in canonical format\r\n\t\tlet trimmedLocality = rawGridRef.replace(/[\\[\\]\\s\\t.-]+/gu, '').toUpperCase();\r\n\t\tlet tetradCode = '';\r\n\t\tlet ref;\r\n\r\n\t\tif (/[ABCDEFGHIJKLMNPQRSTUVWXYZ]$/.test(trimmedLocality)) {\r\n\t\t\t// tetrad or quadrant\r\n\r\n\t\t\tif (QUADRANT_OFFSETS.hasOwnProperty(trimmedLocality.substring(trimmedLocality.length - 2))) {\r\n\t\t\t\tthis.quadrantCode = trimmedLocality.substring(trimmedLocality.length - 2);\r\n\t\t\t\ttrimmedLocality = trimmedLocality.substring(0, trimmedLocality.length - 2);\r\n\t\t\t} else {\r\n\t\t\t\ttetradCode = trimmedLocality.charAt(trimmedLocality.length - 1);\r\n\t\t\t\ttrimmedLocality = trimmedLocality.substring(0, trimmedLocality.length - 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if all numeric gridref, e.g. 38517462 then\r\n\t\t// split with '/', i.e. 38/517462\r\n\t\tif (trimmedLocality === parseInt(trimmedLocality, 10).toString()) {\r\n\t\t\ttrimmedLocality = trimmedLocality.substring(0, 2) + '/' + trimmedLocality.substring(2);\r\n\t\t} else if (trimmedLocality.length > 3 && trimmedLocality.charAt(2) === '/' && /^[A-Z]{2}$/.test(trimmedLocality.substring(0, 2))) {\r\n\t\t\t// preprocess refs of form SD/59 to SD59\r\n\t\t\t// but at this stage want to retain old-style nn/nnnn gridrefs\r\n\t\t\ttrimmedLocality = trimmedLocality.replace('/', '');\r\n\t\t}\r\n\r\n\t\tif (trimmedLocality.substring(0, 2) === 'VC') {\r\n\t\t\t// special case error, VC number entered into the wrong field\r\n\t\t\tthis.error = true;\r\n\t\t\tthis.errorMessage = \"Misplaced vice-county code in grid-reference field. ('\" + trimmedLocality + \"')\";\r\n\t\t\tthis.gridCoords = null;\r\n\t\t\tthis.length = 0;\r\n\t\t} else if ((ref = trimmedLocality.match(/^([HJNOST][ABCDEFGHJKLMNOPQRSTUVWXYZ](?:\\d\\d){1,5})$/)) !== null) {\r\n\t\t\ttrimmedLocality = ref[0]; //grid reference\r\n\r\n\t\t\tthis.parse_wellformed_gb_gr_string_no_tetrads(trimmedLocality);\r\n\r\n\t\t\tif (this.length > 0) {\r\n\t\t\t\tif (this.length === 10000 && (tetradCode || this.quadrantCode)) {\r\n\t\t\t\t\t// tetrad or quadrant suffix\r\n\r\n\t\t\t\t\tif (tetradCode) {\r\n\t\t\t\t\t\tthis.preciseGridRef = trimmedLocality + tetradCode;\r\n\t\t\t\t\t\tthis.tetradLetter = tetradCode;\r\n\t\t\t\t\t\tthis.tetrad = this.hectad + tetradCode;\r\n\t\t\t\t\t\tthis.length = 2000; // 2km square\r\n\t\t\t\t\t\tthis.gridCoords.x += TETRAD_OFFSETS[tetradCode][0];\r\n\t\t\t\t\t\tthis.gridCoords.y += TETRAD_OFFSETS[tetradCode][1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// quadrant\r\n\t\t\t\t\t\tthis.preciseGridRef = trimmedLocality + this.quadrantCode;\r\n\t\t\t\t\t\tthis.tetradLetter = '';\r\n\t\t\t\t\t\tthis.tetrad = '';\r\n\t\t\t\t\t\tthis.quadrant = this.preciseGridRef;\r\n\t\t\t\t\t\tthis.length = 5000; // 5km square\r\n\t\t\t\t\t\tthis.gridCoords.x += QUADRANT_OFFSETS[this.quadrantCode][0];\r\n\t\t\t\t\t\tthis.gridCoords.y += QUADRANT_OFFSETS[this.quadrantCode][1];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.preciseGridRef = trimmedLocality;\r\n\r\n\t\t\t\t\tif (this.length <= 1000) {\r\n\t\t\t\t\t\t// calculate tetrad for precise gridref\r\n\t\t\t\t\t\tthis.set_tetrad();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.error = true;\r\n\t\t\t\tthis.errorMessage = 'GB grid reference format not understood (strange length).';\r\n\t\t\t}\r\n\t\t} else if (/^([\\d]{2})\\/((?:\\d\\d){1,5})$/.test(trimmedLocality)) {\r\n\t\t\t// matching old-style nn/nnnn gridrefs\r\n\t\t\t// where second-part must have even-number of digits\r\n\r\n\t\t\tthis.parse_gr_string_without_tetrads(trimmedLocality);\r\n\r\n\t\t\tswitch (this.length) {\r\n\t\t\t\tcase 10000:\r\n\t\t\t\t\ttrimmedLocality = this.gridCoords.to_gridref(10000);\r\n\t\t\t\t\tthis.hectad = trimmedLocality;\r\n\r\n\t\t\t\t\tif (tetradCode) {\r\n\t\t\t\t\t\ttrimmedLocality += tetradCode;\r\n\t\t\t\t\t\tthis.tetradLetter = tetradCode;\r\n\t\t\t\t\t\tthis.tetrad = this.hectad + tetradCode;\r\n\t\t\t\t\t\tthis.length = 2000; // 2km square\r\n\t\t\t\t\t\tthis.gridCoords.x += TETRAD_OFFSETS[tetradCode][0];\r\n\t\t\t\t\t\tthis.gridCoords.y += TETRAD_OFFSETS[tetradCode][1];\r\n\t\t\t\t\t} else if (this.quadrantCode) {\r\n\t\t\t\t\t\ttrimmedLocality += this.quadrantCode;\r\n\t\t\t\t\t\tthis.quadrant = trimmedLocality;\r\n\t\t\t\t\t\tthis.length = 5000; // 5km square\r\n\t\t\t\t\t\tthis.gridCoords.x += QUADRANT_OFFSETS[this.quadrantCode][0];\r\n\t\t\t\t\t\tthis.gridCoords.y += QUADRANT_OFFSETS[this.quadrantCode][1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 1000:\r\n\t\t\t\tcase 100:\r\n\t\t\t\tcase 10:\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\ttrimmedLocality = this.gridCoords.to_gridref(this.length);\r\n\t\t\t\t\tthis.hectad = this.gridCoords.to_gridref(10000);\r\n\t\t\t\t\tthis.set_tetrad();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.error = true;\r\n\t\t\t\t\tthis.errorMessage = 'Bad grid square dimension (' + this.length + ' m).';\r\n\t\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\t\tthis.length = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.preciseGridRef = trimmedLocality;\r\n\t\t} else {\r\n\t\t\t// no match\r\n\t\t\tthis.gridCoords = null;\r\n\t\t\tthis.length = 0;\r\n\t\t\tthis.error = true;\r\n\t\t\tthis.errorMessage = \"Grid reference format not understood. ('\" + rawGridRef + \"')\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * sets easting, northing and length (in km)\r\n\t * source grid-reference need not be well-formed\r\n\t *\r\n\t * @param {string} gridRef either nn/nn... or aann...\r\n\t */\r\n\tparse_gr_string_without_tetrads(gridRef) {\r\n\t\tlet matches, x, y, ref;\r\n\r\n\t\tif ((matches = gridRef.match(/^(\\d{2})\\/((?:\\d\\d){1,5})$/)) !== null) {\r\n\r\n\t\t\t// old style numerical sheet ref XY/nnnnnn\r\n\t\t\t// nnnn part must have even length\r\n\r\n\t\t\t// northern scottish islands have eccentric numbering\r\n\t\t\tswitch (matches[1]) {\r\n\t\t\t\tcase '57':\r\n\t\t\t\t\tx = 300000;\r\n\t\t\t\t\ty = 1000000;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '67':\r\n\t\t\t\t\tx = 400000;\r\n\t\t\t\t\ty = 1000000;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '58':\r\n\t\t\t\t\tx = 300000;\r\n\t\t\t\t\ty = 1100000;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '68':\r\n\t\t\t\t\tx = 400000;\r\n\t\t\t\t\ty = 1100000;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase '69':\r\n\t\t\t\t\tx = 400000;\r\n\t\t\t\t\ty = 1200000;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tx = gridRef.charAt(0) * 100000;\r\n\t\t\t\t\ty = gridRef.charAt(1) * 100000;\r\n\t\t\t}\r\n\r\n\t\t\tref = matches[2];\r\n\t\t} else {\r\n\t\t\t// modern alphabetical sheet ref\r\n\t\t\tif (!LETTER_MAPPING.hasOwnProperty(gridRef.charAt(0)) || !LETTER_MAPPING.hasOwnProperty(gridRef.charAt(1))) {\r\n\t\t\t\t// invalid\r\n\t\t\t\tthis.length = 0;\r\n\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet char1 = LETTER_MAPPING[gridRef.charAt(0)];\r\n\t\t\tlet char2 = LETTER_MAPPING[gridRef.charAt(1)];\r\n\t\t\tref = gridRef.substring(2);\r\n\r\n\t\t\tx = ((char1 % 5) * 500000) + ((char2 % 5) * 100000) - 1000000;\r\n\t\t\ty = (-Math.floor(char1 / 5) * 500000) - (Math.floor(char2 / 5) * 100000) + 1900000;\r\n\t\t}\r\n\r\n\t\tswitch (ref.length) {\r\n\t\t\tcase 2:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + ref.charAt(0) * 10000, // use first digit of ref\r\n\t\t\t\t\ty + ref.charAt(1) * 10000 // use second digit of ref\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 10000; //10 km square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + Math.floor(ref / 100) * 1000,\r\n\t\t\t\t\ty + (ref % 100) * 1000\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 1000; //1 km square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + Math.floor(ref / 1000) * 100,\r\n\t\t\t\t\ty + (ref % 1000) * 100\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 100; //100m square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 8:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + Math.floor(ref / 10000) * 10,\r\n\t\t\t\t\ty + (ref % 10000) * 10\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 10; //10m square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 10:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + Math.floor(ref / 100000),\r\n\t\t\t\t\ty + (ref % 100000)\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 1; //1m square\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log('Bad grid ref length, ref=' + gridRef);\r\n\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\tthis.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gridRef must be a correctly formed OS GB grid-reference\r\n\t *\r\n\t * sets self::gridCoords\r\n\t * sets self::length\r\n\t * sets self::hectad\r\n\t *\r\n\t * @param {string} gridRef modern alphanumeric format with no suffixes\r\n\t * @throws Error\r\n\t */\r\n\tparse_wellformed_gb_gr_string_no_tetrads(gridRef) {\r\n\t\tlet char1, char2, ref, x, y;\r\n\r\n\t\t// modern alphabetical sheet refs only\r\n\t\tchar1 = LETTER_MAPPING[gridRef.charAt(0)];\r\n\t\tchar2 = LETTER_MAPPING[gridRef.charAt(1)];\r\n\t\tref = gridRef.substring(2);\r\n\r\n\t\tx = ((char1 % 5) * 500000) + ((char2 % 5) * 100000) - 1000000;\r\n\t\ty = (-Math.floor(char1 / 5) * 500000) - (Math.floor(char2 / 5) * 100000) + 1900000;\r\n\r\n\t\tswitch (ref.length) {\r\n\t\t\tcase 2:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + ref.charAt(0) * 10000, // use first digit of ref\r\n\t\t\t\t\ty + ref.charAt(1) * 10000 // use second digit of ref\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 10000; //10 km square\r\n\t\t\t\tthis.hectad = gridRef;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + (Math.floor(ref / 100) * 1000),\r\n\t\t\t\t\ty + ((ref % 100) * 1000)\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 1000; //1 km square\r\n\t\t\t\tthis.hectad = gridRef.substring(0, 3) + gridRef.charAt(4);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + (Math.floor(ref / 1000)) * 100,\r\n\t\t\t\t\ty + (ref % 1000) * 100\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 100; //100m square\r\n\t\t\t\tthis.hectad = gridRef.substring(0, 3) + gridRef.charAt(5);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 8:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + (Math.floor(ref / 10000)) * 10,\r\n\t\t\t\t\ty + (ref % 10000) * 10\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 10; //10m square\r\n\t\t\t\tthis.hectad = gridRef.substring(0, 3) + gridRef.charAt(6);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 10:\r\n\t\t\t\tthis.gridCoords = new GridCoordsGB(\r\n\t\t\t\t\tx + Math.floor(ref / 100000),\r\n\t\t\t\t\ty + (ref % 100000)\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 1; //1m square\r\n\t\t\t\tthis.hectad = gridRef.substring(0, 3) + gridRef.charAt(7);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\tthrow new Error(\"Bad grid ref length when parsing supposedly well-formed ref, ref='\" + gridRef + \"'\");\r\n\t\t}\r\n\t}\r\n}\r\n","import {GridRef, QUADRANT_OFFSETS, TETRAD_OFFSETS} from './GridRef';\r\nimport {GridCoordsIE} from '../GridCoords/GridCoords';\r\n\r\nexport class GridRefIE extends GridRef {\r\n\t/**\r\n\t * @constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.parse_well_formed = this.fromString;\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcountry = 'IE';\r\n\r\n\t/**\r\n\t *\r\n\t * @type {typeof GridCoordsIE}\r\n\t */\r\n\tGridCoords = GridCoordsIE;\r\n\r\n\t/**\r\n\t * @type {GridCoordsIE}\r\n\t */\r\n\tgridCoords = null;\r\n\r\n\tstatic gridLetter = {\r\n\t\tA: [0, 4],\r\n\t\tB: [1, 4],\r\n\t\tC: [2, 4],\r\n\t\tD: [3, 4],\r\n\t\tF: [0, 3],\r\n\t\tG: [1, 3],\r\n\t\tH: [2, 3],\r\n\t\tJ: [3, 3],\r\n\t\tL: [0, 2],\r\n\t\tM: [1, 2],\r\n\t\tN: [2, 2],\r\n\t\tO: [3, 2],\r\n\t\tQ: [0, 1],\r\n\t\tR: [1, 1],\r\n\t\tS: [2, 1],\r\n\t\tT: [3, 1],\r\n\t\tV: [0, 0],\r\n\t\tW: [1, 0],\r\n\t\tX: [2, 0],\r\n\t\tY: [3, 0]\r\n\t};\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string} rawGridRef\r\n\t * @throws Error\r\n\t */\r\n\tfromString(rawGridRef) {\r\n\t\tlet trimmedLocality = rawGridRef.replace(/[\\[\\]\\s\\t.-]+/gu, '').toUpperCase();\r\n\r\n\t\tif (/[ABCDEFGHIJKLMNPQRSTUVWXYZ]$/.test(trimmedLocality)) {\r\n\t\t\t// tetrad or quadrant\r\n\r\n\t\t\tif (QUADRANT_OFFSETS.hasOwnProperty(trimmedLocality.substring(trimmedLocality.length - 2))) {\r\n\t\t\t\tthis.quadrantCode = trimmedLocality.substring(trimmedLocality.length - 2);\r\n\t\t\t\ttrimmedLocality = trimmedLocality.substring(0, trimmedLocality.length - 2);\r\n\t\t\t} else {\r\n\t\t\t\tthis.tetradLetter = trimmedLocality.substring(trimmedLocality.length - 1);\r\n\t\t\t\ttrimmedLocality = trimmedLocality.substring(0, trimmedLocality.length - 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.parse_gr_string_without_tetrads(trimmedLocality);\r\n\r\n\t\tif (this.length > 0) {\r\n\t\t\tif (this.tetradLetter || this.quadrantCode) {\r\n\t\t\t\t// tetrad or quadrant suffix\r\n\r\n\t\t\t\tif (this.tetradLetter) {\r\n\t\t\t\t\tthis.preciseGridRef = this.hectad + this.tetradLetter;\r\n\t\t\t\t\tthis.tetrad = this.preciseGridRef;\r\n\t\t\t\t\tthis.length = 2000; // 2km square\r\n\t\t\t\t\tthis.gridCoords.x += TETRAD_OFFSETS[this.tetradLetter][0];\r\n\t\t\t\t\tthis.gridCoords.y += TETRAD_OFFSETS[this.tetradLetter][1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// quadrant\r\n\t\t\t\t\tthis.preciseGridRef = this.hectad + this.quadrantCode;\r\n\t\t\t\t\tthis.quadrant = this.preciseGridRef;\r\n\t\t\t\t\tthis.length = 5000; // 5km square\r\n\t\t\t\t\tthis.gridCoords.x += QUADRANT_OFFSETS[this.quadrantCode][0];\r\n\t\t\t\t\tthis.gridCoords.y += QUADRANT_OFFSETS[this.quadrantCode][1];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.preciseGridRef = trimmedLocality;\r\n\r\n\t\t\t\tif (this.length <= 1000) {\r\n\t\t\t\t\t// calculate tetrad for precise gridref\r\n\t\t\t\t\tthis.set_tetrad();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.error = true;\r\n\t\t\tthis.errorMessage = \"Irish grid reference format not understood. ('\" + rawGridRef + \"')\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tstatic _IE_GRID_LETTERS = 'VQLFAWRMGBXSNHCYTOJD';\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string} gridRef nn/nnnn or [A-Z]nnnn or [A-Z]/nnnn (no other punctuation by this point), all upper-case\r\n\t * @return boolean\r\n\t */\r\n\tparse_gr_string_without_tetrads(gridRef) {\r\n\t\tlet x, y, ref, char;\r\n\r\n\t\tif (/^\\d{2}\\/(?:\\d\\d){1,5}$/.test(gridRef)) {\r\n\t\t\t// nn/nnnn etc.\r\n\t\t\t// regex used to avoid matching oddly malformed refs, such as \"32/SO763520\"\r\n\r\n\t\t\tx = parseInt(gridRef.charAt(0), 10);\r\n\t\t\ty = parseInt(gridRef.charAt(1), 10);\r\n\r\n\t\t\tif (x > 3 || y > 4) {\r\n\t\t\t\tconsole.log(\"bad grid square, ref='\" + gridRef + \"' (Ireland)\");\r\n\t\t\t\tthis.length = 0;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tref = gridRef.substring(3);\r\n\t\t\tchar = GridRefIE._IE_GRID_LETTERS.charAt((x * 5) + y);\r\n\r\n\t\t\tx *= 100000;\r\n\t\t\ty *= 100000;\r\n\t\t} else {\r\n\t\t\t// [A-Z]nnnn or [A-Z]/nnnn etc.\r\n\t\t\tgridRef = gridRef.replace('/', '');\r\n\r\n\t\t\tif (!/^[ABCDFGHJLMNOQRSTVWXY](?:\\d\\d){1,5}$/.test(gridRef)) {\r\n\t\t\t\tthis.length = 0;// mark error state\r\n\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (gridRef) {\r\n\t\t\t\tchar = gridRef.charAt(0);\r\n\t\t\t\tlet p = GridRefIE._IE_GRID_LETTERS.indexOf(char);\r\n\r\n\t\t\t\tif (p !== -1) {\r\n\t\t\t\t\tx = Math.floor(p / 5) * 100000;\r\n\t\t\t\t\ty = (p % 5) * 100000;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"Bad grid ref grid-letter, ref='\" + gridRef + \"' (Ireland)\");\r\n\t\t\t\t\tthis.length = 0; // mark error\r\n\t\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Bad (empty) Irish grid ref');\r\n\t\t\t\tthis.length = 0; // mark error\r\n\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tref = gridRef.substring(1);\r\n\t\t}\r\n\r\n\t\tswitch (ref.length) {\r\n\t\t\tcase 2:\r\n\t\t\t\tthis.gridCoords = new GridCoordsIE(\r\n\t\t\t\t\tx + (ref.charAt(0) * 10000),\r\n\t\t\t\t\ty + (ref.charAt(1) * 10000)\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 10000; //10 km square\r\n\t\t\t\tthis.hectad = char + ref;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 4:\r\n\t\t\t\tthis.gridCoords = new GridCoordsIE(\r\n\t\t\t\t\tx + Math.floor(ref / 100) * 1000,\r\n\t\t\t\t\ty + (ref % 100) * 1000\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 1000; //1 km square\r\n\t\t\t\tthis.hectad = char + ref.charAt(0) + ref.charAt(2);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 6:\r\n\t\t\t\tthis.gridCoords = new GridCoordsIE(\r\n\t\t\t\t\tx + Math.floor(ref / 1000) * 100,\r\n\t\t\t\t\ty + (ref % 1000) * 100\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 100; // 100m square\r\n\t\t\t\tthis.hectad = char + ref.charAt(0) + ref.charAt(3);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 8:\r\n\t\t\t\tthis.gridCoords = new GridCoordsIE(\r\n\t\t\t\t\tx + Math.floor(ref / 10000) * 10,\r\n\t\t\t\t\ty + (ref % 10000) * 10\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 10; //10m square\r\n\t\t\t\tthis.hectad = char + ref.charAt(0) + ref.charAt(4);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 10:\r\n\t\t\t\tthis.gridCoords = new GridCoordsIE(\r\n\t\t\t\t\tx + Math.floor(ref / 100000),\r\n\t\t\t\t\ty + (ref % 100000)\r\n\t\t\t\t);\r\n\t\t\t\tthis.length = 1; //1m square\r\n\t\t\t\tthis.hectad = char + ref.charAt(0) + ref.charAt(5);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(\"Bad grid ref length, ref='\" + gridRef + \"' (Ireland)\");\r\n\t\t\t\tthis.length = 0;\r\n\t\t\t\tthis.gridCoords = null;\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * used for IE grid-refs\r\n\t *\r\n\t * @param {?number} significantPrecision default null (precision in metres of centroid diameter)\r\n\t * @return {string}\r\n\t */\r\n\ttoHtml(significantPrecision = null) {\r\n\t\tlet formattedGr;\r\n\r\n\t\tif (!significantPrecision || significantPrecision === this.length) {\r\n\t\t\tif (this.length <= 1000) {\r\n\t\t\t\tlet halfNumLen = ((this.preciseGridRef.length - 1) / 2) | 0\r\n\t\t\t\tformattedGr = this.preciseGridRef[0] +\r\n\t\t\t\t\t\"<span class='sig'>\" + this.preciseGridRef.substring(1, 1 + halfNumLen) +\r\n\t\t\t\t\t\"</span><span class='sig'>\" + this.preciseGridRef.substring(1 + halfNumLen) + \"</span>\";\r\n\t\t\t} else {\r\n\t\t\t\tformattedGr = this.preciseGridRef;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.length === 2000) {\r\n\t\t\t\t// reduced precision means greying the tetrad code\r\n\r\n\t\t\t\tformattedGr = `${this.hectad}<span class='nonsig'>${this.tetradLetter}</span>`;\r\n\t\t\t} else if (this.length === 5000) {\r\n\t\t\t\t// reduced precision means greying the quadrant code\r\n\r\n\t\t\t\tformattedGr = `${this.hectad}<span class='nonsig'>${this.quadrantCode}</span>`;\r\n\t\t\t} else {\r\n\t\t\t\tif (significantPrecision > 5000) {\r\n\t\t\t\t\t// large and probably spurious precision value - so grey-out the entire grid-reference\r\n\t\t\t\t\tformattedGr = `<span class='nonsig'>${this.preciseGridRef}</span>`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet columns = (5 + Math.log10(1 / significantPrecision)) | 0; // number of sig figures\r\n\t\t\t\t\tlet halfNumLen = ((this.preciseGridRef.length - 1) / 2) | 0;\r\n\r\n\t\t\t\t\tformattedGr = this.preciseGridRef[0] + \"<span class='sig'>\" + this.preciseGridRef.substring(1, 1 + columns) + \"</span>\" +\r\n\t\t\t\t\t\t\"<span class='nonsig'>\" + this.preciseGridRef.substring(columns + 1, 1 + halfNumLen) + \"</span>\" +\r\n\t\t\t\t\t\t\"<span class='sig'>\" + this.preciseGridRef.substring(1 + halfNumLen, 1 + halfNumLen + columns) + \"</span>\" +\r\n\t\t\t\t\t\t\"<span class='nonsig'>\" + this.preciseGridRef.substring(1 + halfNumLen + columns) + \"</span>\"\r\n\t\t\t\t\t;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn formattedGr;\r\n\t}\r\n}\r\n","import {GridRef} from './GridRef';\r\nimport {GridRefCI} from './GridRefCI';\r\nimport {GridRefGB} from './GridRefGB';\r\nimport {GridRefIE} from './GridRefIE';\r\n\r\n/**\r\n * returns a GridRef (GB, IE or CI-specific parser) or false\r\n * crudely tries to determine the country by trying each country in turn\r\n *\r\n * @param {string} rawGridRef\r\n * @returns {(GridRefCI|GridRefGB|GridRefIE|false)}\r\n */\r\nGridRef.fromString = function (rawGridRef) {\r\n\tlet parser;\r\n\tlet cleanRef = rawGridRef.replace(/\\s+/gu, '').toUpperCase();\r\n\r\n\tif (!cleanRef) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// if canonical ref form then be more efficient\r\n\tif (/^(?:[BCDFGHJLMNOQRSTVWXY]|[HJNOST][ABCDEFGHJKLMNOPQRSTUVWXYZ]|W[VA])\\d{2}(?:[A-Z]|[NS][EW]|(?:\\d{2}){0,4})?$/.test(cleanRef)) {\r\n\t\t// have simple well-formed grid ref\r\n\r\n\t\tif (/^.\\d/.test(cleanRef)) {\r\n\t\t\tparser = new GridRefIE();\r\n\t\t} else {\r\n\t\t\tif (cleanRef.charAt(0) === 'W') {\r\n\t\t\t\tparser = new GridRefCI();\r\n\t\t\t} else {\r\n\t\t\t\tparser = new GridRefGB();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tparser.parse_well_formed(cleanRef);\r\n\r\n\t\treturn (parser.length && !parser.error) ? parser : false;\r\n\t} else {\r\n\t\tparser = new GridRefGB();\r\n\t\tparser.fromString(cleanRef);\r\n\r\n\t\tif (parser.length && !parser.error) {\r\n\t\t\treturn parser;\r\n\t\t}\r\n\r\n\t\tif (cleanRef.charAt(0) === 'W') {\r\n\t\t\tparser = new GridRefCI();\r\n\t\t\tparser.fromString(cleanRef);\r\n\r\n\t\t\tif (parser.length && !parser.error) {\r\n\t\t\t\treturn parser;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tparser = new GridRefIE();\r\n\t\t\tparser.fromString(cleanRef);\r\n\r\n\t\t\tif (parser.length && !parser.error) {\r\n\t\t\t\treturn parser;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nexport {GridRef, GridRefCI, GridRefGB, GridRefIE};\r\n"],"names":[],"mappings":"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"}